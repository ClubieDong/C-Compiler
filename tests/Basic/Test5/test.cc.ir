; ModuleID = 'Module'
source_filename = "Module"

define void @main() {
entry:
  call void @__main__()
  ret void
}

declare i32 @getchar()

declare i32 @putchar(i32)

define void @output(i32 %n) {
entry:
  %0 = alloca i32
  store i32 %n, i32* %0
  %1 = load i32, i32* %0
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = call i32 @putchar(i32 45)
  %4 = load i32, i32* %0
  %5 = sub i32 0, %4
  store i32 %5, i32* %0
  br label %if.merge

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %0
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %if.then1, label %if.else2

if.merge:                                         ; preds = %if.merge3, %if.then
  %num = alloca [20 x i32]
  %num4 = alloca i32*
  %8 = bitcast [20 x i32]* %num to i32*
  store i32* %8, i32** %num4
  %idx = alloca i32
  store i32 0, i32* %idx
  br label %while.cond

if.then1:                                         ; preds = %if.else
  %9 = call i32 @putchar(i32 48)
  ret void

if.else2:                                         ; preds = %if.else
  br label %if.merge3

if.merge3:                                        ; preds = %if.else2, %return.after
  br label %if.merge

return.after:                                     ; No predecessors!
  br label %if.merge3

while.cond:                                       ; preds = %while.body, %if.merge
  %10 = load i32, i32* %0
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %while.body, label %while.merge

while.body:                                       ; preds = %while.cond
  %12 = load i32, i32* %0
  %13 = srem i32 %12, 10
  %14 = load i32*, i32** %num4
  %15 = load i32, i32* %idx
  %16 = getelementptr i32, i32* %14, i32 %15
  store i32 %13, i32* %16
  %17 = load i32, i32* %0
  %18 = sdiv i32 %17, 10
  store i32 %18, i32* %0
  %19 = load i32, i32* %idx
  %20 = add i32 %19, 1
  store i32 %20, i32* %idx
  br label %while.cond

while.merge:                                      ; preds = %while.cond
  %21 = load i32, i32* %idx
  %22 = add i32 %21, -1
  store i32 %22, i32* %idx
  br label %for.cond

for.cond:                                         ; preds = %for.body, %while.merge
  %23 = load i32, i32* %idx
  %24 = icmp sge i32 %23, 0
  br i1 %24, label %for.body, label %for.merge

for.body:                                         ; preds = %for.cond
  %25 = load i32*, i32** %num4
  %26 = load i32, i32* %idx
  %27 = getelementptr i32, i32* %25, i32 %26
  %28 = load i32, i32* %27
  %29 = add i32 %28, 48
  %30 = call i32 @putchar(i32 %29)
  %31 = load i32, i32* %idx
  %32 = add i32 %31, -1
  store i32 %32, i32* %idx
  br label %for.cond

for.merge:                                        ; preds = %for.cond
  ret void
}

define i32 @input() {
entry:
  %n = alloca i32
  store i32 0, i32* %n
  %t = alloca i32
  %0 = call i32 @getchar()
  store i32 %0, i32* %t
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %t
  %2 = icmp sle i32 48, %1
  %3 = load i32, i32* %t
  %4 = icmp sle i32 %3, 57
  %5 = and i1 %2, %4
  br i1 %5, label %while.body, label %while.merge

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n
  %7 = mul i32 %6, 10
  %8 = load i32, i32* %t
  %9 = add i32 %7, %8
  %10 = sub i32 %9, 48
  store i32 %10, i32* %n
  %11 = call i32 @getchar()
  store i32 %11, i32* %t
  br label %while.cond

while.merge:                                      ; preds = %while.cond
  %12 = load i32, i32* %n
  ret i32 %12

return.after:                                     ; No predecessors!
  ret i32 0
}

define void @__main__() {
entry:
  %array = alloca [5 x i32]
  %array1 = alloca i32*
  %0 = bitcast [5 x i32]* %array to i32*
  store i32* %0, i32** %array1
  %a = alloca i32
  %b = alloca i32
  %c = alloca i32
  %d = alloca i32
  %e = alloca i32
  %1 = load i32*, i32** %array1
  %2 = getelementptr i32, i32* %1, i32 0
  store i32 0, i32* %2
  %3 = load i32*, i32** %array1
  %4 = getelementptr i32, i32* %3, i32 1
  store i32 1, i32* %4
  %5 = load i32*, i32** %array1
  %6 = getelementptr i32, i32* %5, i32 2
  store i32 2, i32* %6
  %7 = load i32*, i32** %array1
  %8 = getelementptr i32, i32* %7, i32 3
  store i32 3, i32* %8
  %9 = load i32*, i32** %array1
  %10 = getelementptr i32, i32* %9, i32 4
  store i32 4, i32* %10
  %11 = load i32*, i32** %array1
  %12 = getelementptr i32, i32* %11, i32 0
  %13 = load i32, i32* %12
  %14 = mul i32 10, %13
  store i32 %14, i32* %a
  %15 = load i32*, i32** %array1
  %16 = getelementptr i32, i32* %15, i32 1
  %17 = load i32, i32* %16
  %18 = mul i32 5, %17
  store i32 %18, i32* %b
  %19 = load i32*, i32** %array1
  %20 = getelementptr i32, i32* %19, i32 2
  %21 = load i32, i32* %20
  %22 = mul i32 2, %21
  store i32 %22, i32* %c
  %23 = load i32*, i32** %array1
  %24 = getelementptr i32, i32* %23, i32 3
  %25 = load i32, i32* %24
  %26 = mul i32 20, %25
  store i32 %26, i32* %d
  %27 = load i32*, i32** %array1
  %28 = getelementptr i32, i32* %27, i32 4
  %29 = load i32, i32* %28
  %30 = mul i32 10, %29
  %31 = load i32*, i32** %array1
  %32 = getelementptr i32, i32* %31, i32 2
  %33 = load i32, i32* %32
  %34 = sdiv i32 %30, %33
  store i32 %34, i32* %e
  %35 = load i32, i32* %c
  %36 = load i32, i32* %e
  %37 = mul i32 %35, %36
  %38 = load i32, i32* %b
  %39 = add i32 %38, %37
  %40 = load i32, i32* %d
  %41 = sub i32 %39, %40
  %42 = sub i32 %41, 1
  %43 = load i32*, i32** %array1
  %44 = getelementptr i32, i32* %43, i32 0
  %45 = load i32*, i32** %array1
  %46 = getelementptr i32, i32* %45, i32 3
  %47 = load i32, i32* %e
  %48 = load i32, i32* %46
  %49 = mul i32 %47, %48
  %50 = load i32*, i32** %array1
  %51 = getelementptr i32, i32* %50, i32 2
  %52 = load i32*, i32** %array1
  %53 = getelementptr i32, i32* %52, i32 3
  %54 = load i32, i32* %51
  %55 = load i32, i32* %53
  %56 = add i32 %54, %55
  %57 = sdiv i32 %49, %56
  %58 = load i32, i32* %44
  %59 = add i32 %58, %57
  %60 = sdiv i32 %42, %59
  %61 = load i32*, i32** %array1
  %62 = getelementptr i32, i32* %61, i32 0
  store i32 %60, i32* %62
  %63 = load i32*, i32** %array1
  %64 = getelementptr i32, i32* %63, i32 0
  %65 = load i32, i32* %64
  %66 = load i32, i32* %b
  %67 = mul i32 %65, %66
  call void @output(i32 %67)
  ret void
}
