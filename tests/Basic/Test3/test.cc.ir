; ModuleID = 'Module'
source_filename = "Module"

define void @main() {
entry:
  call void @__main__()
  ret void
}

declare i32 @getchar()

declare i32 @putchar(i32)

define void @output(i32 %n) {
entry:
  %0 = alloca i32
  store i32 %n, i32* %0
  %1 = load i32, i32* %0
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = call i32 @putchar(i32 45)
  %4 = load i32, i32* %0
  %5 = sub i32 0, %4
  store i32 %5, i32* %0
  br label %if.merge

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %0
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %if.then1, label %if.else2

if.merge:                                         ; preds = %if.merge3, %if.then
  %num = alloca [20 x i32]
  %num4 = alloca i32*
  %8 = bitcast [20 x i32]* %num to i32*
  store i32* %8, i32** %num4
  %idx = alloca i32
  store i32 0, i32* %idx
  br label %while.cond

if.then1:                                         ; preds = %if.else
  %9 = call i32 @putchar(i32 48)
  ret void

if.else2:                                         ; preds = %if.else
  br label %if.merge3

if.merge3:                                        ; preds = %if.else2, %return.after
  br label %if.merge

return.after:                                     ; No predecessors!
  br label %if.merge3

while.cond:                                       ; preds = %while.body, %if.merge
  %10 = load i32, i32* %0
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %while.body, label %while.merge

while.body:                                       ; preds = %while.cond
  %12 = load i32, i32* %0
  %13 = srem i32 %12, 10
  %14 = load i32*, i32** %num4
  %15 = load i32, i32* %idx
  %16 = getelementptr i32, i32* %14, i32 %15
  store i32 %13, i32* %16
  %17 = load i32, i32* %0
  %18 = sdiv i32 %17, 10
  store i32 %18, i32* %0
  %19 = load i32, i32* %idx
  %20 = add i32 %19, 1
  store i32 %20, i32* %idx
  br label %while.cond

while.merge:                                      ; preds = %while.cond
  %21 = load i32, i32* %idx
  %22 = add i32 %21, -1
  store i32 %22, i32* %idx
  br label %for.cond

for.cond:                                         ; preds = %for.body, %while.merge
  %23 = load i32, i32* %idx
  %24 = icmp sge i32 %23, 0
  br i1 %24, label %for.body, label %for.merge

for.body:                                         ; preds = %for.cond
  %25 = load i32*, i32** %num4
  %26 = load i32, i32* %idx
  %27 = getelementptr i32, i32* %25, i32 %26
  %28 = load i32, i32* %27
  %29 = add i32 %28, 48
  %30 = call i32 @putchar(i32 %29)
  %31 = load i32, i32* %idx
  %32 = add i32 %31, -1
  store i32 %32, i32* %idx
  br label %for.cond

for.merge:                                        ; preds = %for.cond
  ret void
}

define i32 @input() {
entry:
  %n = alloca i32
  store i32 0, i32* %n
  %t = alloca i32
  %0 = call i32 @getchar()
  store i32 %0, i32* %t
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %t
  %2 = icmp sle i32 48, %1
  %3 = load i32, i32* %t
  %4 = icmp sle i32 %3, 57
  %5 = and i1 %2, %4
  br i1 %5, label %while.body, label %while.merge

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n
  %7 = mul i32 %6, 10
  %8 = load i32, i32* %t
  %9 = add i32 %7, %8
  %10 = sub i32 %9, 48
  store i32 %10, i32* %n
  %11 = call i32 @getchar()
  store i32 %11, i32* %t
  br label %while.cond

while.merge:                                      ; preds = %while.cond
  %12 = load i32, i32* %n
  ret i32 %12

return.after:                                     ; No predecessors!
  ret i32 0
}

define void @__main__() {
entry:
  %i = alloca i32
  %j = alloca i32
  %result = alloca i32
  store i32 0, i32* %i
  br label %while.cond

while.cond:                                       ; preds = %while.merge3, %entry
  %0 = load i32, i32* %i
  %1 = icmp slt i32 %0, 5
  br i1 %1, label %while.body, label %while.merge

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %j
  br label %while.cond1

while.merge:                                      ; preds = %while.cond
  %2 = load i32, i32* %i
  call void @output(i32 %2)
  %3 = load i32, i32* %j
  call void @output(i32 %3)
  ret void

while.cond1:                                      ; preds = %while.body2, %while.body
  %4 = load i32, i32* %j
  %5 = icmp slt i32 %4, 10
  br i1 %5, label %while.body2, label %while.merge3

while.body2:                                      ; preds = %while.cond1
  %6 = load i32, i32* %j
  %7 = load i32, i32* %i
  %8 = mul i32 %6, %7
  %9 = load i32, i32* %result
  %10 = add i32 %9, %8
  store i32 %10, i32* %result
  %11 = load i32, i32* %j
  %12 = add i32 %11, 1
  store i32 %12, i32* %j
  br label %while.cond1

while.merge3:                                     ; preds = %while.cond1
  %13 = load i32, i32* %i
  %14 = add i32 %13, 1
  store i32 %14, i32* %i
  br label %while.cond
}
