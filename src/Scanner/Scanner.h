// Generated by Flexc++ V2.07.07 on Sat, 31 Oct 2020 09:16:14 +0800

#pragma once

#include "Scannerbase.h"
#include "../ErrorHandler.hpp"

class Scanner : public ScannerBase
{
private:
    unsigned int _Column = 1, _Row = 1;

public:
    inline explicit Scanner(std::istream &in = std::cin, std::ostream &out = std::cout)
        : ScannerBase(in, out) {}
    inline Scanner(std::string const &infile, std::string const &outfile)
        : ScannerBase(infile, outfile) {}

    inline int lex() { return lex_(); }

    inline ErrorHandler::Location GetLocation() const
    {
        return ErrorHandler::Location(_Row, _Column - length(), _Column);
    }

private:
    int lex_();
    int executeAction_(size_t ruleNr);

    inline void print() { print_(); }

    // re-implement this function for code that must
    // be exec'ed before the patternmatching starts
    inline void preCode() {}

    // re-implement this function for code that must
    // be exec'ed after the rules's actions.
    inline void postCode([[maybe_unused]] PostEnum_ type)
    {
        if (matched().back() != '\n')
            _Column += length();
        else
        {
            _Column = 1;
            ++_Row;
        }
    }
};
