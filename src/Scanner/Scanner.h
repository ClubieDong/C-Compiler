// Generated by Flexc++ V2.07.07 on Sat, 31 Oct 2020 09:16:14 +0800

#pragma once

#include "Scannerbase.h"
#include <stack>

class Scanner : public ScannerBase
{
private:
    std::string _StoredLine;
    unsigned int _Column = 0, _Row = 0;
    bool _Reset = true;
    std::stack<StartCondition_> _SCStack;

public:
    inline explicit Scanner(std::istream &in = std::cin, std::ostream &out = std::cout)
        : ScannerBase(in, out) { _SCStack.push(StartCondition_::MAIN); }
    inline Scanner(std::string const &infile, std::string const &outfile)
        : ScannerBase(infile, outfile) { _SCStack.push(StartCondition_::MAIN); }

    inline int lex() { return lex_(); }

    inline const std::string& GetLine() const { return _StoredLine; }
    inline unsigned int GetRow() const { return _Row; }
    inline unsigned int GetColumnStart() const { return _Column - length() + 1; }
    inline unsigned int GetColumnEnd() const { return _Column; }

private:
    int lex_();
    int executeAction_(size_t ruleNr);

    inline void print() { print_(); }

    // re-implement this function for code that must
    // be exec'ed before the patternmatching starts
    inline void preCode() {}

    // re-implement this function for code that must
    // be exec'ed after the rules's actions.
    inline void postCode([[maybe_unused]] PostEnum_ type)
    {
        if (!_Reset)
            _Column += length();
        else
        {
            _Reset = false;
            _Column = 0;
            ++_Row;
        }
    }

    inline void pushStartCondition(StartCondition_ next)
    {
        _SCStack.push(startCondition());
        begin(next);
    }

    inline void popStartCondition()
    {
        begin(_SCStack.top());
        _SCStack.pop();
    }
};
