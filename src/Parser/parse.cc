// Generated by Bisonc++ V6.03.00 on Wed, 30 Dec 2020 16:03:19 +0800

// base/comment

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved_::UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN_ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok_
// which is applied. In this errTok_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved_
    {
        UNDETERMINED_   = -2,
        EOF_            = -1,
        errTok_         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    inline bool operator&(StateType lhs, StateType rhs)
    {
        return (static_cast<int>(lhs) & rhs) != 0;
    }
    enum StateTransition
    {
        ACCEPT_   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI_     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR_     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION_ = 10
    };

// Productions Info Records:
PI_ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {273, 1}, // 1: Program ->  StatementList
     {275, 1}, // 2: Expression (NUM) ->  NUM
     {275, 1}, // 3: Expression (ID) ->  ID
     {275, 3}, // 4: Expression ('=') ->  Expression '=' Expression
     {275, 3}, // 5: Expression ('<') ->  Expression '<' Expression
     {275, 3}, // 6: Expression ('>') ->  Expression '>' Expression
     {275, 3}, // 7: Expression (LE) ->  Expression LE Expression
     {275, 3}, // 8: Expression (GE) ->  Expression GE Expression
     {275, 3}, // 9: Expression (EQ) ->  Expression EQ Expression
     {275, 3}, // 10: Expression (NE) ->  Expression NE Expression
     {275, 3}, // 11: Expression ('+') ->  Expression '+' Expression
     {275, 3}, // 12: Expression ('-') ->  Expression '-' Expression
     {275, 3}, // 13: Expression ('*') ->  Expression '*' Expression
     {275, 3}, // 14: Expression ('/') ->  Expression '/' Expression
     {275, 2}, // 15: Expression (NEG) ->  '-' Expression
     {275, 4}, // 16: Expression ('(') ->  Expression '(' OptArgList ')'
     {275, 3}, // 17: Expression ('(') ->  '(' Expression ')'
     {277, 1}, // 18: Statement (';') ->  ';'
     {277, 2}, // 19: Statement (';') ->  Expression ';'
     {277, 5}, // 20: Statement (IF) ->  IF '(' Expression ')' Statement
     {277, 7}, // 21: Statement (IF) ->  IF '(' Expression ')' Statement ELSE Statement
     {277, 5}, // 22: Statement (WHILE) ->  WHILE '(' Expression ')' Statement
     {277, 2}, // 23: Statement (RETURN) ->  RETURN ';'
     {277, 3}, // 24: Statement (RETURN) ->  RETURN Expression ';'
     {277, 3}, // 25: Statement ('{') ->  '{' StatementList '}'
     {277, 3}, // 26: Statement (';') ->  PrimitiveType VarDeclList ';'
     {274, 0}, // 27: StatementList ->  <empty>
     {274, 2}, // 28: StatementList ->  StatementList Statement
     {276, 0}, // 29: OptArgList ->  <empty>
     {276, 1}, // 30: OptArgList ->  ArgList
     {280, 1}, // 31: ArgList ->  Expression
     {280, 3}, // 32: ArgList (',') ->  ArgList ',' Expression
     {281, 1}, // 33: VarDecl (ID) ->  ID
     {281, 3}, // 34: VarDecl (ARR) ->  VarDecl '[' ']'
     {281, 4}, // 35: VarDecl (ARR) ->  VarDecl '[' Expression ']'
     {281, 2}, // 36: VarDecl (PTR) ->  '*' VarDecl
     {281, 3}, // 37: VarDecl ('(') ->  '(' VarDecl ')'
     {282, 1}, // 38: InitVarDecl ->  VarDecl
     {282, 3}, // 39: InitVarDecl ('=') ->  VarDecl '=' Expression
     {278, 1}, // 40: PrimitiveType (VOID) ->  VOID
     {278, 1}, // 41: PrimitiveType (INT) ->  INT
     {278, 2}, // 42: PrimitiveType (STRUCT) ->  STRUCT ID
     {279, 1}, // 43: VarDeclList ->  InitVarDecl
     {279, 3}, // 44: VarDeclList (',') ->  VarDeclList ',' InitVarDecl
     {283, 0}, // 45: OptParamList ->  <empty>
     {283, 1}, // 46: OptParamList (VOID) ->  VOID
     {283, 1}, // 47: OptParamList ->  ParamList
     {284, 2}, // 48: ParamList ->  PrimitiveType VarDecl
     {284, 4}, // 49: ParamList (',') ->  ParamList ',' PrimitiveType VarDecl
     {285, 1}, // 50: Program_$ ->  Program
};

// State info and SR_ transitions for each state.


SR_ s_0[] =
{
    { { DEF_RED}, {   3} },                 
    { {     273}, {   1} }, // Program      
    { {     274}, {   2} }, // StatementList
    { {       0}, { -27} },                 
};

SR_ s_1[] =
{
    { { REQ_TOKEN}, {       2} }, 
    { {      EOF_}, { ACCEPT_} }, 
    { {         0}, {       0} }, 
};

SR_ s_2[] =
{
    { { REQ_DEF}, { 16} },                 
    { {     277}, {  3} }, // Statement    
    { {      59}, {  4} }, // ';'          
    { {     275}, {  5} }, // Expression   
    { {     260}, {  6} }, // IF           
    { {     262}, {  7} }, // WHILE        
    { {     259}, {  8} }, // RETURN       
    { {     123}, {  9} }, // '{'          
    { {     278}, { 10} }, // PrimitiveType
    { {     264}, { 11} }, // NUM          
    { {     265}, { 12} }, // ID           
    { {      45}, { 13} }, // '-'          
    { {      40}, { 14} }, // '('          
    { {     257}, { 15} }, // VOID         
    { {     258}, { 16} }, // INT          
    { {     263}, { 17} }, // STRUCT       
    { {       0}, { -1} },                 
};

SR_ s_3[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR_ s_4[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR_ s_5[] =
{
    { { REQ_TOKEN}, { 14} },       
    { {        59}, { 18} }, // ';'
    { {        61}, { 19} }, // '='
    { {        60}, { 20} }, // '<'
    { {        62}, { 21} }, // '>'
    { {       268}, { 22} }, // LE 
    { {       269}, { 23} }, // GE 
    { {       270}, { 24} }, // EQ 
    { {       271}, { 25} }, // NE 
    { {        43}, { 26} }, // '+'
    { {        45}, { 27} }, // '-'
    { {        42}, { 28} }, // '*'
    { {        47}, { 29} }, // '/'
    { {        40}, { 30} }, // '('
    { {         0}, {  0} },       
};

SR_ s_6[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 31} }, // '('
    { {         0}, {  0} },       
};

SR_ s_7[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 32} }, // '('
    { {         0}, {  0} },       
};

SR_ s_8[] =
{
    { { REQ_TOKEN}, {  7} },              
    { {        59}, { 33} }, // ';'       
    { {       275}, { 34} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_9[] =
{
    { { DEF_RED}, {   2} },                 
    { {     274}, {  35} }, // StatementList
    { {       0}, { -27} },                 
};

SR_ s_10[] =
{
    { { REQ_TOKEN}, {  7} },               
    { {       279}, { 36} }, // VarDeclList
    { {       282}, { 37} }, // InitVarDecl
    { {       281}, { 38} }, // VarDecl    
    { {       265}, { 39} }, // ID         
    { {        42}, { 40} }, // '*'        
    { {        40}, { 41} }, // '('        
    { {         0}, {  0} },               
};

SR_ s_11[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR_ s_12[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR_ s_13[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 42} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_14[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 43} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR_ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR_ s_17[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       265}, { 44} }, // ID
    { {         0}, {  0} },      
};

SR_ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR_ s_19[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 45} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_20[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 46} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_21[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 47} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_22[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 48} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_23[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 49} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_24[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 50} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_25[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 51} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_26[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 52} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_27[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 53} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_28[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 54} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_29[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 55} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_30[] =
{
    { { REQ_DEF}, {   8} },              
    { {     276}, {  56} }, // OptArgList
    { {     280}, {  57} }, // ArgList   
    { {     275}, {  58} }, // Expression
    { {     264}, {  11} }, // NUM       
    { {     265}, {  12} }, // ID        
    { {      45}, {  13} }, // '-'       
    { {      40}, {  14} }, // '('       
    { {       0}, { -29} },              
};

SR_ s_31[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 59} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_32[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 60} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR_ s_34[] =
{
    { { REQ_TOKEN}, { 14} },       
    { {        59}, { 61} }, // ';'
    { {        61}, { 19} }, // '='
    { {        60}, { 20} }, // '<'
    { {        62}, { 21} }, // '>'
    { {       268}, { 22} }, // LE 
    { {       269}, { 23} }, // GE 
    { {       270}, { 24} }, // EQ 
    { {       271}, { 25} }, // NE 
    { {        43}, { 26} }, // '+'
    { {        45}, { 27} }, // '-'
    { {        42}, { 28} }, // '*'
    { {        47}, { 29} }, // '/'
    { {        40}, { 30} }, // '('
    { {         0}, {  0} },       
};

SR_ s_35[] =
{
    { { REQ_TOKEN}, { 17} },                 
    { {       125}, { 62} }, // '}'          
    { {       277}, {  3} }, // Statement    
    { {        59}, {  4} }, // ';'          
    { {       275}, {  5} }, // Expression   
    { {       260}, {  6} }, // IF           
    { {       262}, {  7} }, // WHILE        
    { {       259}, {  8} }, // RETURN       
    { {       123}, {  9} }, // '{'          
    { {       278}, { 10} }, // PrimitiveType
    { {       264}, { 11} }, // NUM          
    { {       265}, { 12} }, // ID           
    { {        45}, { 13} }, // '-'          
    { {        40}, { 14} }, // '('          
    { {       257}, { 15} }, // VOID         
    { {       258}, { 16} }, // INT          
    { {       263}, { 17} }, // STRUCT       
    { {         0}, {  0} },                 
};

SR_ s_36[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 63} }, // ';'
    { {        44}, { 64} }, // ','
    { {         0}, {  0} },       
};

SR_ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR_ s_38[] =
{
    { { REQ_DEF}, {   3} },       
    { {      61}, {  65} }, // '='
    { {      91}, {  66} }, // '['
    { {       0}, { -38} },       
};

SR_ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR_ s_40[] =
{
    { { REQ_TOKEN}, {  5} },           
    { {       281}, { 67} }, // VarDecl
    { {       265}, { 39} }, // ID     
    { {        42}, { 40} }, // '*'    
    { {        40}, { 41} }, // '('    
    { {         0}, {  0} },           
};

SR_ s_41[] =
{
    { { REQ_TOKEN}, {  5} },           
    { {       281}, { 68} }, // VarDecl
    { {       265}, { 39} }, // ID     
    { {        42}, { 40} }, // '*'    
    { {        40}, { 41} }, // '('    
    { {         0}, {  0} },           
};

SR_ s_42[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -15} }, 
};

SR_ s_43[] =
{
    { { REQ_TOKEN}, { 14} },       
    { {        41}, { 69} }, // ')'
    { {        61}, { 19} }, // '='
    { {        60}, { 20} }, // '<'
    { {        62}, { 21} }, // '>'
    { {       268}, { 22} }, // LE 
    { {       269}, { 23} }, // GE 
    { {       270}, { 24} }, // EQ 
    { {       271}, { 25} }, // NE 
    { {        43}, { 26} }, // '+'
    { {        45}, { 27} }, // '-'
    { {        42}, { 28} }, // '*'
    { {        47}, { 29} }, // '/'
    { {        40}, { 30} }, // '('
    { {         0}, {  0} },       
};

SR_ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR_ s_45[] =
{
    { { REQ_DEF}, { 12} },       
    { {      61}, { 19} }, // '='
    { {      60}, { 20} }, // '<'
    { {      62}, { 21} }, // '>'
    { {     268}, { 22} }, // LE 
    { {     269}, { 23} }, // GE 
    { {     270}, { 24} }, // EQ 
    { {     271}, { 25} }, // NE 
    { {      43}, { 26} }, // '+'
    { {      45}, { 27} }, // '-'
    { {      42}, { 28} }, // '*'
    { {      47}, { 29} }, // '/'
    { {       0}, { -4} },       
};

SR_ s_46[] =
{
    { { REQ_DEF}, {  5} },       
    { {      43}, { 26} }, // '+'
    { {      45}, { 27} }, // '-'
    { {      42}, { 28} }, // '*'
    { {      47}, { 29} }, // '/'
    { {       0}, { -5} },       
};

SR_ s_47[] =
{
    { { REQ_DEF}, {  5} },       
    { {      43}, { 26} }, // '+'
    { {      45}, { 27} }, // '-'
    { {      42}, { 28} }, // '*'
    { {      47}, { 29} }, // '/'
    { {       0}, { -6} },       
};

SR_ s_48[] =
{
    { { REQ_DEF}, {  5} },       
    { {      43}, { 26} }, // '+'
    { {      45}, { 27} }, // '-'
    { {      42}, { 28} }, // '*'
    { {      47}, { 29} }, // '/'
    { {       0}, { -7} },       
};

SR_ s_49[] =
{
    { { REQ_DEF}, {  5} },       
    { {      43}, { 26} }, // '+'
    { {      45}, { 27} }, // '-'
    { {      42}, { 28} }, // '*'
    { {      47}, { 29} }, // '/'
    { {       0}, { -8} },       
};

SR_ s_50[] =
{
    { { REQ_DEF}, {  5} },       
    { {      43}, { 26} }, // '+'
    { {      45}, { 27} }, // '-'
    { {      42}, { 28} }, // '*'
    { {      47}, { 29} }, // '/'
    { {       0}, { -9} },       
};

SR_ s_51[] =
{
    { { REQ_DEF}, {   5} },       
    { {      43}, {  26} }, // '+'
    { {      45}, {  27} }, // '-'
    { {      42}, {  28} }, // '*'
    { {      47}, {  29} }, // '/'
    { {       0}, { -10} },       
};

SR_ s_52[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  28} }, // '*'
    { {      47}, {  29} }, // '/'
    { {       0}, { -11} },       
};

SR_ s_53[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  28} }, // '*'
    { {      47}, {  29} }, // '/'
    { {       0}, { -12} },       
};

SR_ s_54[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -13} }, 
};

SR_ s_55[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -14} }, 
};

SR_ s_56[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 70} }, // ')'
    { {         0}, {  0} },       
};

SR_ s_57[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, {  71} }, // ','
    { {       0}, { -30} },       
};

SR_ s_58[] =
{
    { { REQ_DEF}, {  13} },       
    { {      61}, {  19} }, // '='
    { {      60}, {  20} }, // '<'
    { {      62}, {  21} }, // '>'
    { {     268}, {  22} }, // LE 
    { {     269}, {  23} }, // GE 
    { {     270}, {  24} }, // EQ 
    { {     271}, {  25} }, // NE 
    { {      43}, {  26} }, // '+'
    { {      45}, {  27} }, // '-'
    { {      42}, {  28} }, // '*'
    { {      47}, {  29} }, // '/'
    { {      40}, {  30} }, // '('
    { {       0}, { -31} },       
};

SR_ s_59[] =
{
    { { REQ_TOKEN}, { 14} },       
    { {        41}, { 72} }, // ')'
    { {        61}, { 19} }, // '='
    { {        60}, { 20} }, // '<'
    { {        62}, { 21} }, // '>'
    { {       268}, { 22} }, // LE 
    { {       269}, { 23} }, // GE 
    { {       270}, { 24} }, // EQ 
    { {       271}, { 25} }, // NE 
    { {        43}, { 26} }, // '+'
    { {        45}, { 27} }, // '-'
    { {        42}, { 28} }, // '*'
    { {        47}, { 29} }, // '/'
    { {        40}, { 30} }, // '('
    { {         0}, {  0} },       
};

SR_ s_60[] =
{
    { { REQ_TOKEN}, { 14} },       
    { {        41}, { 73} }, // ')'
    { {        61}, { 19} }, // '='
    { {        60}, { 20} }, // '<'
    { {        62}, { 21} }, // '>'
    { {       268}, { 22} }, // LE 
    { {       269}, { 23} }, // GE 
    { {       270}, { 24} }, // EQ 
    { {       271}, { 25} }, // NE 
    { {        43}, { 26} }, // '+'
    { {        45}, { 27} }, // '-'
    { {        42}, { 28} }, // '*'
    { {        47}, { 29} }, // '/'
    { {        40}, { 30} }, // '('
    { {         0}, {  0} },       
};

SR_ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR_ s_62[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR_ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR_ s_64[] =
{
    { { REQ_TOKEN}, {  6} },               
    { {       282}, { 74} }, // InitVarDecl
    { {       281}, { 38} }, // VarDecl    
    { {       265}, { 39} }, // ID         
    { {        42}, { 40} }, // '*'        
    { {        40}, { 41} }, // '('        
    { {         0}, {  0} },               
};

SR_ s_65[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 75} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_66[] =
{
    { { REQ_TOKEN}, {  7} },              
    { {        93}, { 76} }, // ']'       
    { {       275}, { 77} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_67[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  66} }, // '['
    { {       0}, { -36} },       
};

SR_ s_68[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        41}, { 78} }, // ')'
    { {        91}, { 66} }, // '['
    { {         0}, {  0} },       
};

SR_ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR_ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR_ s_71[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       275}, { 79} }, // Expression
    { {       264}, { 11} }, // NUM       
    { {       265}, { 12} }, // ID        
    { {        45}, { 13} }, // '-'       
    { {        40}, { 14} }, // '('       
    { {         0}, {  0} },              
};

SR_ s_72[] =
{
    { { REQ_TOKEN}, { 16} },                 
    { {       277}, { 80} }, // Statement    
    { {        59}, {  4} }, // ';'          
    { {       275}, {  5} }, // Expression   
    { {       260}, {  6} }, // IF           
    { {       262}, {  7} }, // WHILE        
    { {       259}, {  8} }, // RETURN       
    { {       123}, {  9} }, // '{'          
    { {       278}, { 10} }, // PrimitiveType
    { {       264}, { 11} }, // NUM          
    { {       265}, { 12} }, // ID           
    { {        45}, { 13} }, // '-'          
    { {        40}, { 14} }, // '('          
    { {       257}, { 15} }, // VOID         
    { {       258}, { 16} }, // INT          
    { {       263}, { 17} }, // STRUCT       
    { {         0}, {  0} },                 
};

SR_ s_73[] =
{
    { { REQ_TOKEN}, { 16} },                 
    { {       277}, { 81} }, // Statement    
    { {        59}, {  4} }, // ';'          
    { {       275}, {  5} }, // Expression   
    { {       260}, {  6} }, // IF           
    { {       262}, {  7} }, // WHILE        
    { {       259}, {  8} }, // RETURN       
    { {       123}, {  9} }, // '{'          
    { {       278}, { 10} }, // PrimitiveType
    { {       264}, { 11} }, // NUM          
    { {       265}, { 12} }, // ID           
    { {        45}, { 13} }, // '-'          
    { {        40}, { 14} }, // '('          
    { {       257}, { 15} }, // VOID         
    { {       258}, { 16} }, // INT          
    { {       263}, { 17} }, // STRUCT       
    { {         0}, {  0} },                 
};

SR_ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR_ s_75[] =
{
    { { REQ_DEF}, {  13} },       
    { {      61}, {  19} }, // '='
    { {      60}, {  20} }, // '<'
    { {      62}, {  21} }, // '>'
    { {     268}, {  22} }, // LE 
    { {     269}, {  23} }, // GE 
    { {     270}, {  24} }, // EQ 
    { {     271}, {  25} }, // NE 
    { {      43}, {  26} }, // '+'
    { {      45}, {  27} }, // '-'
    { {      42}, {  28} }, // '*'
    { {      47}, {  29} }, // '/'
    { {      40}, {  30} }, // '('
    { {       0}, { -39} },       
};

SR_ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR_ s_77[] =
{
    { { REQ_TOKEN}, { 14} },       
    { {        93}, { 82} }, // ']'
    { {        61}, { 19} }, // '='
    { {        60}, { 20} }, // '<'
    { {        62}, { 21} }, // '>'
    { {       268}, { 22} }, // LE 
    { {       269}, { 23} }, // GE 
    { {       270}, { 24} }, // EQ 
    { {       271}, { 25} }, // NE 
    { {        43}, { 26} }, // '+'
    { {        45}, { 27} }, // '-'
    { {        42}, { 28} }, // '*'
    { {        47}, { 29} }, // '/'
    { {        40}, { 30} }, // '('
    { {         0}, {  0} },       
};

SR_ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR_ s_79[] =
{
    { { REQ_DEF}, {  13} },       
    { {      61}, {  19} }, // '='
    { {      60}, {  20} }, // '<'
    { {      62}, {  21} }, // '>'
    { {     268}, {  22} }, // LE 
    { {     269}, {  23} }, // GE 
    { {     270}, {  24} }, // EQ 
    { {     271}, {  25} }, // NE 
    { {      43}, {  26} }, // '+'
    { {      45}, {  27} }, // '-'
    { {      42}, {  28} }, // '*'
    { {      47}, {  29} }, // '/'
    { {      40}, {  30} }, // '('
    { {       0}, { -32} },       
};

SR_ s_80[] =
{
    { { REQ_DEF}, {   2} },        
    { {     261}, {  83} }, // ELSE
    { {       0}, { -20} },        
};

SR_ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR_ s_82[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR_ s_83[] =
{
    { { REQ_TOKEN}, { 16} },                 
    { {       277}, { 84} }, // Statement    
    { {        59}, {  4} }, // ';'          
    { {       275}, {  5} }, // Expression   
    { {       260}, {  6} }, // IF           
    { {       262}, {  7} }, // WHILE        
    { {       259}, {  8} }, // RETURN       
    { {       123}, {  9} }, // '{'          
    { {       278}, { 10} }, // PrimitiveType
    { {       264}, { 11} }, // NUM          
    { {       265}, { 12} }, // ID           
    { {        45}, { 13} }, // '-'          
    { {        40}, { 14} }, // '('          
    { {       257}, { 15} }, // VOID         
    { {       258}, { 16} }, // INT          
    { {       263}, { 17} }, // STRUCT       
    { {         0}, {  0} },                 
};

SR_ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};


// State array:
SR_ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,
};

} // anonymous namespace ends




// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved_::UNDETERMINED_),
    // $insert baseclasscode
    d_requiredTokens_(0)
{
}

// base/clearin
void ParserBase::clearin_()
{
    d_nErrors_ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved_::UNDETERMINED_;
    d_next = TokenPair{ Reserved_::UNDETERMINED_, STYPE_{} };
    d_recovery = false;
    d_acceptedTokens_ = d_requiredTokens_;
    d_val_ = STYPE_{};

    push_(0);
}

// base/debugfunctions

void ParserBase::setDebug(bool mode)
{
    d_actionCases_ = false;
    d_debug_ = mode;
}

void ParserBase::setDebug(DebugMode_ mode)
{
    d_actionCases_ = mode & ACTIONCASES;
    d_debug_ =       mode & ON;
}

// base/lex
void ParserBase::lex_(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved_::EOF_;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup_() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR_ const *sr = s_state[d_state];
    SR_ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN_;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop_(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void ParserBase::popToken_()
{
    d_token = d_next.first;
    d_val_ = std::move(d_next.second);

    d_next.first = Reserved_::UNDETERMINED_;
}

// base/push
void ParserBase::push_(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize_() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION_;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val_) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken_(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val_) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken_()
{
    if (d_token != Reserved_::UNDETERMINED_)
        pushToken_(d_token);
}

// base/reduce
void ParserBase::reduce_(int rule)
{
    PI_ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop_(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift_(int action)
{
    push_(action);
    popToken_();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens_ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery_()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken_(Reserved_::errTok_);      // specify errTok_ as next token
    push_(lookup_());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top_() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery_()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens_ >= d_requiredTokens_)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors_;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top_()][0].d_type & ERR_ITEM))
    {
        pop_();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle_ for details.

    startRecovery_();
}

// derived/executeaction
void Parser::executeAction_(int production)
try
{
    if (token_() != Reserved_::UNDETERMINED_)
        pushToken_(token_());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 1:
        { vs_(0)->Show(); }
        break;

        case 2:
        { d_val_ = std::make_unique<ast::Constant>(std::stod(_Scanner->matched())); }
        break;

        case 3:
        { d_val_ = std::make_unique<ast::Variable>(_Scanner->matched()); }
        break;

        case 4:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::ASSIGN); }
        break;

        case 5:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::LESS); }
        break;

        case 6:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::GREATER); }
        break;

        case 7:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::LESS_EQUAL); }
        break;

        case 8:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::GREATER_EQUAL); }
        break;

        case 9:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::EQUAL); }
        break;

        case 10:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::NOT_EQUAL); }
        break;

        case 11:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::ADD); }
        break;

        case 12:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::SUB); }
        break;

        case 13:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::MUL); }
        break;

        case 14:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::DIV); }
        break;

        case 15:
        { d_val_ = std::make_unique<ast::UnOpExpr>(vs_(0), ast::UnOpExpr::NEG); }
        break;

        case 16:
        { d_val_ = std::move(vs_(-1)); ast::cast<ast::CallExpr>(d_val_)->SetFunc(vs_(-3)); }
        break;

        case 17:
        { d_val_ = std::move(vs_(-1)); }
        break;

        case 18:
        { d_val_ = std::make_unique<ast::ExprStmt>(); }
        break;

        case 19:
        { d_val_ = std::make_unique<ast::ExprStmt>(vs_(-1)); }
        break;

        case 20:
        { d_val_ = std::make_unique<ast::IfStmt>(vs_(-2), vs_(0)); }
        break;

        case 21:
        { d_val_ = std::make_unique<ast::IfStmt>(vs_(-4), vs_(-2), vs_(0)); }
        break;

        case 22:
        { d_val_ = std::make_unique<ast::WhileStmt>(vs_(-2), vs_(0)); }
        break;

        case 23:
        { d_val_ = std::make_unique<ast::ReturnStmt>(); }
        break;

        case 24:
        { d_val_ = std::make_unique<ast::ReturnStmt>(vs_(-1)); }
        break;

        case 25:
        { d_val_ = std::move(vs_(0)); }
        break;

        case 26:
        { d_val_ = std::move(vs_(-1)); ast::cast<ast::VarDeclStmt>(d_val_)->SetType(vs_(-2)); }
        break;

        case 27:
        { d_val_ = std::make_unique<ast::StatementList>(); }
        break;

        case 28:
        { d_val_ = std::move(vs_(-1)); ast::cast<ast::StatementList>(d_val_)->AddStmt(vs_(0)); }
        break;

        case 29:
        { d_val_ = std::make_unique<ast::CallExpr>(); }
        break;

        case 30:
        { d_val_ = std::move(vs_(0)); }
        break;

        case 31:
        { d_val_ = std::make_unique<ast::CallExpr>(vs_(0)); }
        break;

        case 32:
        { d_val_ = std::move(vs_(-2)); ast::cast<ast::CallExpr>(d_val_)->AddArg(vs_(0)); }
        break;

        case 33:
        { d_val_ = std::make_unique<ast::PlainVarDecl>(_Scanner->matched()); }
        break;

        case 34:
        { d_val_ = std::make_unique<ast::ArrayVarDecl>(vs_(-2)); }
        break;

        case 35:
        { d_val_ = std::make_unique<ast::ArrayVarDecl>(vs_(-3), vs_(-1)); }
        break;

        case 36:
        { d_val_ = std::make_unique<ast::PointerVarDecl>(vs_(0)); }
        break;

        case 37:
        { d_val_ = std::move(vs_(-1)); }
        break;

        case 38:
        { d_val_ = std::make_unique<ast::InitVarDecl>(vs_(0)); }
        break;

        case 39:
        { d_val_ = std::make_unique<ast::InitVarDecl>(vs_(-2), vs_(0)); }
        break;

        case 40:
        { d_val_ = std::make_unique<ast::BasicType>(ast::BasicType::VOID); }
        break;

        case 41:
        { d_val_ = std::make_unique<ast::BasicType>(ast::BasicType::INT); }
        break;

        case 42:
        { d_val_ = std::make_unique<ast::CustomType>(_Scanner->matched()); }
        break;

        case 43:
        { d_val_ = std::make_unique<ast::VarDeclStmt>(vs_(0)); }
        break;

        case 44:
        { d_val_ = std::move(vs_(-2)); ast::cast<ast::VarDeclStmt>(d_val_)->AddVar(vs_(0)); }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle_()
try
{
    if (s_state[state_()]->d_type & REQ_TOKEN)
        nextToken_();              // obtain next token


    int action = lookup_();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift_(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery_())
            redoToken_();
        else
            executeAction_(-action);
                                            // next token is the rule's LHS
        reduce_(-action); 
        return;
    }

    if (recovery_())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery_)
{
    if (not recovery_())
        errorRecovery_();
    else
    {
        if (token_() == Reserved_::EOF_)
            ABORT();
        popToken_();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken_()
{ 
    // If d_token is Reserved_::UNDETERMINED_ then if savedToken_() is
    // Reserved_::UNDETERMINED_ another token is obtained from lex(). Then
    // savedToken_() is assigned to d_token.

                                    // no need for a token: got one already
    if (token_() != Reserved_::UNDETERMINED_) 
    {
        return;                             
    }

    if (savedToken_() != Reserved_::UNDETERMINED_)
    {
        popToken_();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens_;       // accept another token (see
                                    // errorRecover())
        lex_(lex());
        print_();
    }
    print();
}

// derived/print
void Parser::print_()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin_.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin_();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle_();
    }
}
catch (Return_ retValue)
{
    return retValue or d_nErrors_;
}


// derived/tail


