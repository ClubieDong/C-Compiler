// Generated by Bisonc++ V6.03.00 on Mon, 04 Jan 2021 02:11:17 +0800

// base/comment

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved_::UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN_ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok_
// which is applied. In this errTok_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved_
    {
        UNDETERMINED_   = -2,
        EOF_            = -1,
        errTok_         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    inline bool operator&(StateType lhs, StateType rhs)
    {
        return (static_cast<int>(lhs) & rhs) != 0;
    }
    enum StateTransition
    {
        ACCEPT_   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI_     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR_     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION_ = 10
    };

// Productions Info Records:
PI_ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {284, 1}, // 1: Program ->  DeclarationList
     {286, 1}, // 2: ID (ID_TEXT) ->  ID_TEXT
     {287, 1}, // 3: PrimaryExpression (TRUE) ->  TRUE
     {287, 1}, // 4: PrimaryExpression (FALSE) ->  FALSE
     {287, 1}, // 5: PrimaryExpression (CONSTINT) ->  CONSTINT
     {287, 1}, // 6: PrimaryExpression (CONSTINT_BIN) ->  CONSTINT_BIN
     {287, 1}, // 7: PrimaryExpression (CONSTINT_OCT) ->  CONSTINT_OCT
     {287, 1}, // 8: PrimaryExpression (CONSTINT_HEX) ->  CONSTINT_HEX
     {287, 1}, // 9: PrimaryExpression (CONSTFP) ->  CONSTFP
     {287, 1}, // 10: PrimaryExpression ->  ID
     {287, 3}, // 11: PrimaryExpression ('(') ->  '(' Expression ')'
     {287, 3}, // 12: PrimaryExpression ('(') ->  '(' errTok_ ')'
     {289, 1}, // 13: PostExpression ->  PrimaryExpression
     {289, 4}, // 14: PostExpression ('(') ->  PostExpression '(' OptArgList ')'
     {289, 4}, // 15: PostExpression ('(') ->  PostExpression '(' errTok_ ')'
     {291, 1}, // 16: PreExpression ->  PostExpression
     {291, 2}, // 17: PreExpression ('-') ->  '-' PreExpression
     {288, 1}, // 18: Expression ->  PreExpression
     {288, 3}, // 19: Expression ('=') ->  Expression '=' Expression
     {288, 3}, // 20: Expression ('<') ->  Expression '<' Expression
     {288, 3}, // 21: Expression ('>') ->  Expression '>' Expression
     {288, 3}, // 22: Expression (LE) ->  Expression LE Expression
     {288, 3}, // 23: Expression (GE) ->  Expression GE Expression
     {288, 3}, // 24: Expression (EQ) ->  Expression EQ Expression
     {288, 3}, // 25: Expression (NE) ->  Expression NE Expression
     {288, 3}, // 26: Expression ('+') ->  Expression '+' Expression
     {288, 3}, // 27: Expression ('-') ->  Expression '-' Expression
     {288, 3}, // 28: Expression ('*') ->  Expression '*' Expression
     {288, 3}, // 29: Expression ('/') ->  Expression '/' Expression
     {292, 1}, // 30: Statement (';') ->  ';'
     {292, 2}, // 31: Statement (errTok_) ->  errTok_ ';'
     {292, 2}, // 32: Statement (';') ->  Expression ';'
     {292, 1}, // 33: Statement ->  Declaration
     {292, 5}, // 34: Statement (IF) ->  IF '(' Expression ')' Statement
     {292, 7}, // 35: Statement (IF) ->  IF '(' Expression ')' Statement ELSE Statement
     {292, 5}, // 36: Statement (WHILE) ->  WHILE '(' Expression ')' Statement
     {292, 2}, // 37: Statement (RETURN) ->  RETURN ';'
     {292, 3}, // 38: Statement (RETURN) ->  RETURN Expression ';'
     {292, 3}, // 39: Statement ('{') ->  '{' StatementList '}'
     {292, 3}, // 40: Statement ('{') ->  '{' errTok_ '}'
     {294, 0}, // 41: StatementList ->  <empty>
     {294, 2}, // 42: StatementList ->  StatementList Statement
     {294, 2}, // 43: StatementList (errTok_) ->  StatementList errTok_
     {290, 0}, // 44: OptArgList ->  <empty>
     {290, 1}, // 45: OptArgList ->  ArgList
     {295, 1}, // 46: ArgList ->  Expression
     {295, 3}, // 47: ArgList (',') ->  ArgList ',' Expression
     {295, 3}, // 48: ArgList (',') ->  ArgList ',' errTok_
     {296, 1}, // 49: VarDecl ->  ID
     {296, 3}, // 50: VarDecl (ARR) ->  VarDecl '[' ']'
     {296, 4}, // 51: VarDecl (ARR) ->  VarDecl '[' Expression ']'
     {296, 4}, // 52: VarDecl (ARR) ->  VarDecl '[' errTok_ ']'
     {296, 2}, // 53: VarDecl (PTR) ->  '*' VarDecl
     {296, 2}, // 54: VarDecl (PTR) ->  '&' VarDecl
     {296, 3}, // 55: VarDecl ('(') ->  '(' VarDecl ')'
     {296, 3}, // 56: VarDecl ('(') ->  '(' errTok_ ')'
     {297, 4}, // 57: FuncDecl ('(') ->  ID '(' OptParamList ')'
     {297, 3}, // 58: FuncDecl (ARR) ->  FuncDecl '[' ']'
     {297, 4}, // 59: FuncDecl (ARR) ->  FuncDecl '[' Expression ']'
     {297, 4}, // 60: FuncDecl (ARR) ->  FuncDecl '[' errTok_ ']'
     {297, 2}, // 61: FuncDecl (PTR) ->  '*' FuncDecl
     {297, 2}, // 62: FuncDecl (PTR) ->  '&' FuncDecl
     {297, 3}, // 63: FuncDecl ('(') ->  '(' FuncDecl ')'
     {297, 3}, // 64: FuncDecl ('(') ->  '(' errTok_ ')'
     {299, 0}, // 65: EmptyID ->  <empty>
     {300, 1}, // 66: PureDecl ->  EmptyID
     {300, 4}, // 67: PureDecl ('(') ->  EmptyID '(' OptParamList ')'
     {300, 3}, // 68: PureDecl (ARR) ->  Decl '[' ']'
     {300, 4}, // 69: PureDecl (ARR) ->  Decl '[' Expression ']'
     {300, 4}, // 70: PureDecl (ARR) ->  Decl '[' errTok_ ']'
     {300, 2}, // 71: PureDecl (PTR) ->  '*' Decl
     {300, 2}, // 72: PureDecl (PTR) ->  '&' Decl
     {300, 3}, // 73: PureDecl ('(') ->  '(' Decl ')'
     {300, 3}, // 74: PureDecl ('(') ->  '(' errTok_ ')'
     {301, 1}, // 75: Decl ->  VarDecl
     {301, 1}, // 76: Decl ->  FuncDecl
     {302, 1}, // 77: InitDecl ->  Decl
     {302, 3}, // 78: InitDecl ('=') ->  Decl '=' Expression
     {303, 1}, // 79: TypePrimitive (VOID) ->  VOID
     {303, 1}, // 80: TypePrimitive (BOOL) ->  BOOL
     {303, 1}, // 81: TypePrimitive (CHAR) ->  CHAR
     {303, 1}, // 82: TypePrimitive (SHORT) ->  SHORT
     {303, 1}, // 83: TypePrimitive (INT) ->  INT
     {303, 1}, // 84: TypePrimitive (LONG) ->  LONG
     {303, 1}, // 85: TypePrimitive (FLOAT) ->  FLOAT
     {303, 1}, // 86: TypePrimitive (DOUBLE) ->  DOUBLE
     {303, 2}, // 87: TypePrimitive (STRUCT) ->  STRUCT ID
     {304, 1}, // 88: DeclList ->  InitDecl
     {304, 3}, // 89: DeclList (',') ->  DeclList ',' InitDecl
     {304, 3}, // 90: DeclList (',') ->  DeclList ',' errTok_
     {298, 0}, // 91: OptParamList ->  <empty>
     {298, 1}, // 92: OptParamList (VOID) ->  VOID
     {298, 1}, // 93: OptParamList ->  ParamList
     {305, 2}, // 94: ParamList ->  TypePrimitive Decl
     {305, 4}, // 95: ParamList (',') ->  ParamList ',' TypePrimitive Decl
     {305, 3}, // 96: ParamList (',') ->  ParamList ',' errTok_
     {293, 3}, // 97: Declaration (';') ->  TypePrimitive DeclList ';'
     {293, 5}, // 98: Declaration ('{') ->  TypePrimitive FuncDecl '{' StatementList '}'
     {293, 5}, // 99: Declaration ('{') ->  TypePrimitive FuncDecl '{' errTok_ '}'
     {285, 1}, // 100: DeclarationList ->  Declaration
     {285, 2}, // 101: DeclarationList ->  DeclarationList Declaration
     {285, 2}, // 102: DeclarationList (errTok_) ->  DeclarationList errTok_
     {306, 1}, // 103: Program_$ ->  Program
};

// State info and SR_ transitions for each state.


SR_ s_0[] =
{
    { { REQ_TOKEN}, { 14} },                   
    { {       284}, {  1} }, // Program        
    { {       285}, {  2} }, // DeclarationList
    { {       293}, {  3} }, // Declaration    
    { {       303}, {  4} }, // TypePrimitive  
    { {       257}, {  5} }, // VOID           
    { {       258}, {  6} }, // BOOL           
    { {       259}, {  7} }, // CHAR           
    { {       260}, {  8} }, // SHORT          
    { {       261}, {  9} }, // INT            
    { {       262}, { 10} }, // LONG           
    { {       263}, { 11} }, // FLOAT          
    { {       264}, { 12} }, // DOUBLE         
    { {       271}, { 13} }, // STRUCT         
    { {         0}, {  0} },                   
};

SR_ s_1[] =
{
    { { REQ_TOKEN}, {       2} }, 
    { {      EOF_}, { ACCEPT_} }, 
    { {         0}, {       0} }, 
};

SR_ s_2[] =
{
    { { ERR_REQ_DEF}, { 13} },                 
    { {         293}, { 14} }, // Declaration  
    { {     errTok_}, { 15} }, // errTok_      
    { {         303}, {  4} }, // TypePrimitive
    { {         257}, {  5} }, // VOID         
    { {         258}, {  6} }, // BOOL         
    { {         259}, {  7} }, // CHAR         
    { {         260}, {  8} }, // SHORT        
    { {         261}, {  9} }, // INT          
    { {         262}, { 10} }, // LONG         
    { {         263}, { 11} }, // FLOAT        
    { {         264}, { 12} }, // DOUBLE       
    { {         271}, { 13} }, // STRUCT       
    { {           0}, { -1} },                 
};

SR_ s_3[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -100} }, 
};

SR_ s_4[] =
{
    { { REQ_TOKEN}, { 11} },            
    { {       304}, { 16} }, // DeclList
    { {       297}, { 17} }, // FuncDecl
    { {       302}, { 18} }, // InitDecl
    { {       286}, { 19} }, // ID      
    { {        42}, { 20} }, // '*'     
    { {        38}, { 21} }, // '&'     
    { {        40}, { 22} }, // '('     
    { {       301}, { 23} }, // Decl    
    { {       272}, { 24} }, // ID_TEXT 
    { {       296}, { 25} }, // VarDecl 
    { {         0}, {  0} },            
};

SR_ s_5[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR_ s_6[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR_ s_7[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR_ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR_ s_9[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR_ s_10[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR_ s_11[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR_ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR_ s_13[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       286}, { 26} }, // ID     
    { {       272}, { 24} }, // ID_TEXT
    { {         0}, {  0} },           
};

SR_ s_14[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -101} }, 
};

SR_ s_15[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -102} }, 
};

SR_ s_16[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 27} }, // ';'
    { {        44}, { 28} }, // ','
    { {         0}, {  0} },       
};

SR_ s_17[] =
{
    { { REQ_DEF}, {   3} },       
    { {     123}, {  29} }, // '{'
    { {      91}, {  30} }, // '['
    { {       0}, { -76} },       
};

SR_ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR_ s_19[] =
{
    { { REQ_DEF}, {   2} },       
    { {      40}, {  31} }, // '('
    { {       0}, { -49} },       
};

SR_ s_20[] =
{
    { { REQ_TOKEN}, {  8} },            
    { {       297}, { 32} }, // FuncDecl
    { {       296}, { 33} }, // VarDecl 
    { {       286}, { 19} }, // ID      
    { {        42}, { 20} }, // '*'     
    { {        38}, { 21} }, // '&'     
    { {        40}, { 22} }, // '('     
    { {       272}, { 24} }, // ID_TEXT 
    { {         0}, {  0} },            
};

SR_ s_21[] =
{
    { { REQ_TOKEN}, {  8} },            
    { {       297}, { 34} }, // FuncDecl
    { {       296}, { 35} }, // VarDecl 
    { {       286}, { 19} }, // ID      
    { {        42}, { 20} }, // '*'     
    { {        38}, { 21} }, // '&'     
    { {        40}, { 22} }, // '('     
    { {       272}, { 24} }, // ID_TEXT 
    { {         0}, {  0} },            
};

SR_ s_22[] =
{
    { { ERR_REQ}, {  9} },            
    { {     297}, { 36} }, // FuncDecl
    { { errTok_}, { 37} }, // errTok_ 
    { {     296}, { 38} }, // VarDecl 
    { {     286}, { 19} }, // ID      
    { {      42}, { 20} }, // '*'     
    { {      38}, { 21} }, // '&'     
    { {      40}, { 22} }, // '('     
    { {     272}, { 24} }, // ID_TEXT 
    { {       0}, {  0} },            
};

SR_ s_23[] =
{
    { { REQ_DEF}, {   2} },       
    { {      61}, {  39} }, // '='
    { {       0}, { -77} },       
};

SR_ s_24[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR_ s_25[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  40} }, // '['
    { {       0}, { -75} },       
};

SR_ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR_ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -97} }, 
};

SR_ s_28[] =
{
    { { ERR_REQ}, { 11} },            
    { {     302}, { 41} }, // InitDecl
    { { errTok_}, { 42} }, // errTok_ 
    { {     301}, { 23} }, // Decl    
    { {     296}, { 25} }, // VarDecl 
    { {     297}, { 43} }, // FuncDecl
    { {     286}, { 19} }, // ID      
    { {      42}, { 20} }, // '*'     
    { {      38}, { 21} }, // '&'     
    { {      40}, { 22} }, // '('     
    { {     272}, { 24} }, // ID_TEXT 
    { {       0}, {  0} },            
};

SR_ s_29[] =
{
    { { ERR_REQ_DEF}, {   3} },                 
    { {         294}, {  44} }, // StatementList
    { {     errTok_}, {  45} }, // errTok_      
    { {           0}, { -41} },                 
};

SR_ s_30[] =
{
    { { ERR_REQ}, { 18} },                     
    { {      93}, { 46} }, // ']'              
    { {     288}, { 47} }, // Expression       
    { { errTok_}, { 48} }, // errTok_          
    { {     291}, { 49} }, // PreExpression    
    { {     289}, { 50} }, // PostExpression   
    { {      45}, { 51} }, // '-'              
    { {     287}, { 52} }, // PrimaryExpression
    { {     265}, { 53} }, // TRUE             
    { {     266}, { 54} }, // FALSE            
    { {     273}, { 55} }, // CONSTINT         
    { {     274}, { 56} }, // CONSTINT_BIN     
    { {     275}, { 57} }, // CONSTINT_OCT     
    { {     276}, { 58} }, // CONSTINT_HEX     
    { {     277}, { 59} }, // CONSTFP          
    { {     286}, { 60} }, // ID               
    { {      40}, { 61} }, // '('              
    { {     272}, { 24} }, // ID_TEXT          
    { {       0}, {  0} },                     
};

SR_ s_31[] =
{
    { { REQ_DEF}, {  13} },                 
    { {     298}, {  62} }, // OptParamList 
    { {     257}, {  63} }, // VOID         
    { {     305}, {  64} }, // ParamList    
    { {     303}, {  65} }, // TypePrimitive
    { {     258}, {   6} }, // BOOL         
    { {     259}, {   7} }, // CHAR         
    { {     260}, {   8} }, // SHORT        
    { {     261}, {   9} }, // INT          
    { {     262}, {  10} }, // LONG         
    { {     263}, {  11} }, // FLOAT        
    { {     264}, {  12} }, // DOUBLE       
    { {     271}, {  13} }, // STRUCT       
    { {       0}, { -91} },                 
};

SR_ s_32[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -61} }, 
};

SR_ s_33[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -53} }, 
};

SR_ s_34[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -62} }, 
};

SR_ s_35[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -54} }, 
};

SR_ s_36[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        41}, { 66} }, // ')'
    { {        91}, { 30} }, // '['
    { {         0}, {  0} },       
};

SR_ s_37[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 67} }, // ')'
    { {         0}, {  0} },       
};

SR_ s_38[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        41}, { 68} }, // ')'
    { {        91}, { 40} }, // '['
    { {         0}, {  0} },       
};

SR_ s_39[] =
{
    { { REQ_TOKEN}, { 16} },                     
    { {       288}, { 69} }, // Expression       
    { {       291}, { 49} }, // PreExpression    
    { {       289}, { 50} }, // PostExpression   
    { {        45}, { 51} }, // '-'              
    { {       287}, { 52} }, // PrimaryExpression
    { {       265}, { 53} }, // TRUE             
    { {       266}, { 54} }, // FALSE            
    { {       273}, { 55} }, // CONSTINT         
    { {       274}, { 56} }, // CONSTINT_BIN     
    { {       275}, { 57} }, // CONSTINT_OCT     
    { {       276}, { 58} }, // CONSTINT_HEX     
    { {       277}, { 59} }, // CONSTFP          
    { {       286}, { 60} }, // ID               
    { {        40}, { 61} }, // '('              
    { {       272}, { 24} }, // ID_TEXT          
    { {         0}, {  0} },                     
};

SR_ s_40[] =
{
    { { ERR_REQ}, { 18} },                     
    { {      93}, { 70} }, // ']'              
    { {     288}, { 71} }, // Expression       
    { { errTok_}, { 72} }, // errTok_          
    { {     291}, { 49} }, // PreExpression    
    { {     289}, { 50} }, // PostExpression   
    { {      45}, { 51} }, // '-'              
    { {     287}, { 52} }, // PrimaryExpression
    { {     265}, { 53} }, // TRUE             
    { {     266}, { 54} }, // FALSE            
    { {     273}, { 55} }, // CONSTINT         
    { {     274}, { 56} }, // CONSTINT_BIN     
    { {     275}, { 57} }, // CONSTINT_OCT     
    { {     276}, { 58} }, // CONSTINT_HEX     
    { {     277}, { 59} }, // CONSTFP          
    { {     286}, { 60} }, // ID               
    { {      40}, { 61} }, // '('              
    { {     272}, { 24} }, // ID_TEXT          
    { {       0}, {  0} },                     
};

SR_ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR_ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR_ s_43[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  30} }, // '['
    { {       0}, { -76} },       
};

SR_ s_44[] =
{
    { { ERR_REQ}, { 35} },                     
    { {     125}, { 73} }, // '}'              
    { {     292}, { 74} }, // Statement        
    { { errTok_}, { 75} }, // errTok_          
    { {      59}, { 76} }, // ';'              
    { {     288}, { 77} }, // Expression       
    { {     293}, { 78} }, // Declaration      
    { {     268}, { 79} }, // IF               
    { {     270}, { 80} }, // WHILE            
    { {     267}, { 81} }, // RETURN           
    { {     123}, { 82} }, // '{'              
    { {     291}, { 49} }, // PreExpression    
    { {     303}, {  4} }, // TypePrimitive    
    { {     289}, { 50} }, // PostExpression   
    { {      45}, { 51} }, // '-'              
    { {     257}, {  5} }, // VOID             
    { {     258}, {  6} }, // BOOL             
    { {     259}, {  7} }, // CHAR             
    { {     260}, {  8} }, // SHORT            
    { {     261}, {  9} }, // INT              
    { {     262}, { 10} }, // LONG             
    { {     263}, { 11} }, // FLOAT            
    { {     264}, { 12} }, // DOUBLE           
    { {     271}, { 13} }, // STRUCT           
    { {     287}, { 52} }, // PrimaryExpression
    { {     265}, { 53} }, // TRUE             
    { {     266}, { 54} }, // FALSE            
    { {     273}, { 55} }, // CONSTINT         
    { {     274}, { 56} }, // CONSTINT_BIN     
    { {     275}, { 57} }, // CONSTINT_OCT     
    { {     276}, { 58} }, // CONSTINT_HEX     
    { {     277}, { 59} }, // CONSTFP          
    { {     286}, { 60} }, // ID               
    { {      40}, { 61} }, // '('              
    { {     272}, { 24} }, // ID_TEXT          
    { {       0}, {  0} },                     
};

SR_ s_45[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       125}, { 83} }, // '}'
    { {         0}, {  0} },       
};

SR_ s_46[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR_ s_47[] =
{
    { { REQ_TOKEN}, { 13} },       
    { {        93}, { 84} }, // ']'
    { {        61}, { 85} }, // '='
    { {        60}, { 86} }, // '<'
    { {        62}, { 87} }, // '>'
    { {       280}, { 88} }, // LE 
    { {       281}, { 89} }, // GE 
    { {       282}, { 90} }, // EQ 
    { {       283}, { 91} }, // NE 
    { {        43}, { 92} }, // '+'
    { {        45}, { 93} }, // '-'
    { {        42}, { 94} }, // '*'
    { {        47}, { 95} }, // '/'
    { {         0}, {  0} },       
};

SR_ s_48[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        93}, { 96} }, // ']'
    { {         0}, {  0} },       
};

SR_ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR_ s_50[] =
{
    { { REQ_DEF}, {   2} },       
    { {      40}, {  97} }, // '('
    { {       0}, { -16} },       
};

SR_ s_51[] =
{
    { { REQ_TOKEN}, { 15} },                     
    { {       291}, { 98} }, // PreExpression    
    { {       289}, { 50} }, // PostExpression   
    { {        45}, { 51} }, // '-'              
    { {       287}, { 52} }, // PrimaryExpression
    { {       265}, { 53} }, // TRUE             
    { {       266}, { 54} }, // FALSE            
    { {       273}, { 55} }, // CONSTINT         
    { {       274}, { 56} }, // CONSTINT_BIN     
    { {       275}, { 57} }, // CONSTINT_OCT     
    { {       276}, { 58} }, // CONSTINT_HEX     
    { {       277}, { 59} }, // CONSTFP          
    { {       286}, { 60} }, // ID               
    { {        40}, { 61} }, // '('              
    { {       272}, { 24} }, // ID_TEXT          
    { {         0}, {  0} },                     
};

SR_ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR_ s_53[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR_ s_54[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR_ s_55[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR_ s_56[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR_ s_57[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR_ s_58[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR_ s_59[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR_ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR_ s_61[] =
{
    { { ERR_REQ}, {  17} },                     
    { {     288}, {  99} }, // Expression       
    { { errTok_}, { 100} }, // errTok_          
    { {     291}, {  49} }, // PreExpression    
    { {     289}, {  50} }, // PostExpression   
    { {      45}, {  51} }, // '-'              
    { {     287}, {  52} }, // PrimaryExpression
    { {     265}, {  53} }, // TRUE             
    { {     266}, {  54} }, // FALSE            
    { {     273}, {  55} }, // CONSTINT         
    { {     274}, {  56} }, // CONSTINT_BIN     
    { {     275}, {  57} }, // CONSTINT_OCT     
    { {     276}, {  58} }, // CONSTINT_HEX     
    { {     277}, {  59} }, // CONSTFP          
    { {     286}, {  60} }, // ID               
    { {      40}, {  61} }, // '('              
    { {     272}, {  24} }, // ID_TEXT          
    { {       0}, {   0} },                     
};

SR_ s_62[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 101} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_63[] =
{
    { { REQ_DEF}, {   2} },       
    { {      41}, { -92} }, // ')'
    { {       0}, { -79} },       
};

SR_ s_64[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 102} }, // ','
    { {       0}, { -93} },       
};

SR_ s_65[] =
{
    { { REQ_TOKEN}, {   9} },            
    { {       301}, { 103} }, // Decl    
    { {       296}, {  25} }, // VarDecl 
    { {       297}, {  43} }, // FuncDecl
    { {       286}, {  19} }, // ID      
    { {        42}, {  20} }, // '*'     
    { {        38}, {  21} }, // '&'     
    { {        40}, {  22} }, // '('     
    { {       272}, {  24} }, // ID_TEXT 
    { {         0}, {   0} },            
};

SR_ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR_ s_67[] =
{
    { { REQ_DEF}, {   2} },       
    { {     123}, { -64} }, // '{'
    { {       0}, { -56} },       
};

SR_ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR_ s_69[] =
{
    { { REQ_DEF}, {  12} },       
    { {      61}, {  85} }, // '='
    { {      60}, {  86} }, // '<'
    { {      62}, {  87} }, // '>'
    { {     280}, {  88} }, // LE 
    { {     281}, {  89} }, // GE 
    { {     282}, {  90} }, // EQ 
    { {     283}, {  91} }, // NE 
    { {      43}, {  92} }, // '+'
    { {      45}, {  93} }, // '-'
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -78} },       
};

SR_ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR_ s_71[] =
{
    { { REQ_TOKEN}, {  13} },       
    { {        93}, { 104} }, // ']'
    { {        61}, {  85} }, // '='
    { {        60}, {  86} }, // '<'
    { {        62}, {  87} }, // '>'
    { {       280}, {  88} }, // LE 
    { {       281}, {  89} }, // GE 
    { {       282}, {  90} }, // EQ 
    { {       283}, {  91} }, // NE 
    { {        43}, {  92} }, // '+'
    { {        45}, {  93} }, // '-'
    { {        42}, {  94} }, // '*'
    { {        47}, {  95} }, // '/'
    { {         0}, {   0} },       
};

SR_ s_72[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 105} }, // ']'
    { {         0}, {   0} },       
};

SR_ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -98} }, 
};

SR_ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR_ s_75[] =
{
    { { REQ_DEF}, {   2} },       
    { {      59}, { 106} }, // ';'
    { {       0}, { -43} },       
};

SR_ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR_ s_77[] =
{
    { { REQ_TOKEN}, {  13} },       
    { {        59}, { 107} }, // ';'
    { {        61}, {  85} }, // '='
    { {        60}, {  86} }, // '<'
    { {        62}, {  87} }, // '>'
    { {       280}, {  88} }, // LE 
    { {       281}, {  89} }, // GE 
    { {       282}, {  90} }, // EQ 
    { {       283}, {  91} }, // NE 
    { {        43}, {  92} }, // '+'
    { {        45}, {  93} }, // '-'
    { {        42}, {  94} }, // '*'
    { {        47}, {  95} }, // '/'
    { {         0}, {   0} },       
};

SR_ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR_ s_79[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 108} }, // '('
    { {         0}, {   0} },       
};

SR_ s_80[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 109} }, // '('
    { {         0}, {   0} },       
};

SR_ s_81[] =
{
    { { REQ_TOKEN}, {  17} },                     
    { {        59}, { 110} }, // ';'              
    { {       288}, { 111} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_82[] =
{
    { { ERR_REQ_DEF}, {   3} },                 
    { {         294}, { 112} }, // StatementList
    { {     errTok_}, { 113} }, // errTok_      
    { {           0}, { -41} },                 
};

SR_ s_83[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -99} }, 
};

SR_ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR_ s_85[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 114} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_86[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 115} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_87[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 116} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_88[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 117} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_89[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 118} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_90[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 119} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_91[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 120} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_92[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 121} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_93[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 122} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_94[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 123} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_95[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 124} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR_ s_97[] =
{
    { { ERR_REQ_DEF}, {  19} },                     
    { {         290}, { 125} }, // OptArgList       
    { {     errTok_}, { 126} }, // errTok_          
    { {         295}, { 127} }, // ArgList          
    { {         288}, { 128} }, // Expression       
    { {         291}, {  49} }, // PreExpression    
    { {         289}, {  50} }, // PostExpression   
    { {          45}, {  51} }, // '-'              
    { {         287}, {  52} }, // PrimaryExpression
    { {         265}, {  53} }, // TRUE             
    { {         266}, {  54} }, // FALSE            
    { {         273}, {  55} }, // CONSTINT         
    { {         274}, {  56} }, // CONSTINT_BIN     
    { {         275}, {  57} }, // CONSTINT_OCT     
    { {         276}, {  58} }, // CONSTINT_HEX     
    { {         277}, {  59} }, // CONSTFP          
    { {         286}, {  60} }, // ID               
    { {          40}, {  61} }, // '('              
    { {         272}, {  24} }, // ID_TEXT          
    { {           0}, { -44} },                     
};

SR_ s_98[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR_ s_99[] =
{
    { { REQ_TOKEN}, {  13} },       
    { {        41}, { 129} }, // ')'
    { {        61}, {  85} }, // '='
    { {        60}, {  86} }, // '<'
    { {        62}, {  87} }, // '>'
    { {       280}, {  88} }, // LE 
    { {       281}, {  89} }, // GE 
    { {       282}, {  90} }, // EQ 
    { {       283}, {  91} }, // NE 
    { {        43}, {  92} }, // '+'
    { {        45}, {  93} }, // '-'
    { {        42}, {  94} }, // '*'
    { {        47}, {  95} }, // '/'
    { {         0}, {   0} },       
};

SR_ s_100[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 130} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR_ s_102[] =
{
    { { ERR_REQ}, {  12} },                 
    { {     303}, { 131} }, // TypePrimitive
    { { errTok_}, { 132} }, // errTok_      
    { {     257}, {   5} }, // VOID         
    { {     258}, {   6} }, // BOOL         
    { {     259}, {   7} }, // CHAR         
    { {     260}, {   8} }, // SHORT        
    { {     261}, {   9} }, // INT          
    { {     262}, {  10} }, // LONG         
    { {     263}, {  11} }, // FLOAT        
    { {     264}, {  12} }, // DOUBLE       
    { {     271}, {  13} }, // STRUCT       
    { {       0}, {   0} },                 
};

SR_ s_103[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR_ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR_ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR_ s_106[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR_ s_107[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR_ s_108[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 133} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_109[] =
{
    { { REQ_TOKEN}, {  16} },                     
    { {       288}, { 134} }, // Expression       
    { {       291}, {  49} }, // PreExpression    
    { {       289}, {  50} }, // PostExpression   
    { {        45}, {  51} }, // '-'              
    { {       287}, {  52} }, // PrimaryExpression
    { {       265}, {  53} }, // TRUE             
    { {       266}, {  54} }, // FALSE            
    { {       273}, {  55} }, // CONSTINT         
    { {       274}, {  56} }, // CONSTINT_BIN     
    { {       275}, {  57} }, // CONSTINT_OCT     
    { {       276}, {  58} }, // CONSTINT_HEX     
    { {       277}, {  59} }, // CONSTFP          
    { {       286}, {  60} }, // ID               
    { {        40}, {  61} }, // '('              
    { {       272}, {  24} }, // ID_TEXT          
    { {         0}, {   0} },                     
};

SR_ s_110[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR_ s_111[] =
{
    { { REQ_TOKEN}, {  13} },       
    { {        59}, { 135} }, // ';'
    { {        61}, {  85} }, // '='
    { {        60}, {  86} }, // '<'
    { {        62}, {  87} }, // '>'
    { {       280}, {  88} }, // LE 
    { {       281}, {  89} }, // GE 
    { {       282}, {  90} }, // EQ 
    { {       283}, {  91} }, // NE 
    { {        43}, {  92} }, // '+'
    { {        45}, {  93} }, // '-'
    { {        42}, {  94} }, // '*'
    { {        47}, {  95} }, // '/'
    { {         0}, {   0} },       
};

SR_ s_112[] =
{
    { { ERR_REQ}, {  35} },                     
    { {     125}, { 136} }, // '}'              
    { {     292}, {  74} }, // Statement        
    { { errTok_}, {  75} }, // errTok_          
    { {      59}, {  76} }, // ';'              
    { {     288}, {  77} }, // Expression       
    { {     293}, {  78} }, // Declaration      
    { {     268}, {  79} }, // IF               
    { {     270}, {  80} }, // WHILE            
    { {     267}, {  81} }, // RETURN           
    { {     123}, {  82} }, // '{'              
    { {     291}, {  49} }, // PreExpression    
    { {     303}, {   4} }, // TypePrimitive    
    { {     289}, {  50} }, // PostExpression   
    { {      45}, {  51} }, // '-'              
    { {     257}, {   5} }, // VOID             
    { {     258}, {   6} }, // BOOL             
    { {     259}, {   7} }, // CHAR             
    { {     260}, {   8} }, // SHORT            
    { {     261}, {   9} }, // INT              
    { {     262}, {  10} }, // LONG             
    { {     263}, {  11} }, // FLOAT            
    { {     264}, {  12} }, // DOUBLE           
    { {     271}, {  13} }, // STRUCT           
    { {     287}, {  52} }, // PrimaryExpression
    { {     265}, {  53} }, // TRUE             
    { {     266}, {  54} }, // FALSE            
    { {     273}, {  55} }, // CONSTINT         
    { {     274}, {  56} }, // CONSTINT_BIN     
    { {     275}, {  57} }, // CONSTINT_OCT     
    { {     276}, {  58} }, // CONSTINT_HEX     
    { {     277}, {  59} }, // CONSTFP          
    { {     286}, {  60} }, // ID               
    { {      40}, {  61} }, // '('              
    { {     272}, {  24} }, // ID_TEXT          
    { {       0}, {   0} },                     
};

SR_ s_113[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       125}, { 137} }, // '}'
    { {         0}, {   0} },       
};

SR_ s_114[] =
{
    { { REQ_DEF}, {  12} },       
    { {      61}, {  85} }, // '='
    { {      60}, {  86} }, // '<'
    { {      62}, {  87} }, // '>'
    { {     280}, {  88} }, // LE 
    { {     281}, {  89} }, // GE 
    { {     282}, {  90} }, // EQ 
    { {     283}, {  91} }, // NE 
    { {      43}, {  92} }, // '+'
    { {      45}, {  93} }, // '-'
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -19} },       
};

SR_ s_115[] =
{
    { { REQ_DEF}, {   5} },       
    { {      43}, {  92} }, // '+'
    { {      45}, {  93} }, // '-'
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -20} },       
};

SR_ s_116[] =
{
    { { REQ_DEF}, {   5} },       
    { {      43}, {  92} }, // '+'
    { {      45}, {  93} }, // '-'
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -21} },       
};

SR_ s_117[] =
{
    { { REQ_DEF}, {   5} },       
    { {      43}, {  92} }, // '+'
    { {      45}, {  93} }, // '-'
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -22} },       
};

SR_ s_118[] =
{
    { { REQ_DEF}, {   5} },       
    { {      43}, {  92} }, // '+'
    { {      45}, {  93} }, // '-'
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -23} },       
};

SR_ s_119[] =
{
    { { REQ_DEF}, {   5} },       
    { {      43}, {  92} }, // '+'
    { {      45}, {  93} }, // '-'
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -24} },       
};

SR_ s_120[] =
{
    { { REQ_DEF}, {   5} },       
    { {      43}, {  92} }, // '+'
    { {      45}, {  93} }, // '-'
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -25} },       
};

SR_ s_121[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -26} },       
};

SR_ s_122[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -27} },       
};

SR_ s_123[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -28} }, 
};

SR_ s_124[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -29} }, 
};

SR_ s_125[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 138} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_126[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 139} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_127[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 140} }, // ','
    { {       0}, { -45} },       
};

SR_ s_128[] =
{
    { { REQ_DEF}, {  12} },       
    { {      61}, {  85} }, // '='
    { {      60}, {  86} }, // '<'
    { {      62}, {  87} }, // '>'
    { {     280}, {  88} }, // LE 
    { {     281}, {  89} }, // GE 
    { {     282}, {  90} }, // EQ 
    { {     283}, {  91} }, // NE 
    { {      43}, {  92} }, // '+'
    { {      45}, {  93} }, // '-'
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -46} },       
};

SR_ s_129[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR_ s_130[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR_ s_131[] =
{
    { { REQ_TOKEN}, {   9} },            
    { {       301}, { 141} }, // Decl    
    { {       296}, {  25} }, // VarDecl 
    { {       297}, {  43} }, // FuncDecl
    { {       286}, {  19} }, // ID      
    { {        42}, {  20} }, // '*'     
    { {        38}, {  21} }, // '&'     
    { {        40}, {  22} }, // '('     
    { {       272}, {  24} }, // ID_TEXT 
    { {         0}, {   0} },            
};

SR_ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};

SR_ s_133[] =
{
    { { REQ_TOKEN}, {  13} },       
    { {        41}, { 142} }, // ')'
    { {        61}, {  85} }, // '='
    { {        60}, {  86} }, // '<'
    { {        62}, {  87} }, // '>'
    { {       280}, {  88} }, // LE 
    { {       281}, {  89} }, // GE 
    { {       282}, {  90} }, // EQ 
    { {       283}, {  91} }, // NE 
    { {        43}, {  92} }, // '+'
    { {        45}, {  93} }, // '-'
    { {        42}, {  94} }, // '*'
    { {        47}, {  95} }, // '/'
    { {         0}, {   0} },       
};

SR_ s_134[] =
{
    { { REQ_TOKEN}, {  13} },       
    { {        41}, { 143} }, // ')'
    { {        61}, {  85} }, // '='
    { {        60}, {  86} }, // '<'
    { {        62}, {  87} }, // '>'
    { {       280}, {  88} }, // LE 
    { {       281}, {  89} }, // GE 
    { {       282}, {  90} }, // EQ 
    { {       283}, {  91} }, // NE 
    { {        43}, {  92} }, // '+'
    { {        45}, {  93} }, // '-'
    { {        42}, {  94} }, // '*'
    { {        47}, {  95} }, // '/'
    { {         0}, {   0} },       
};

SR_ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR_ s_136[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR_ s_137[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR_ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR_ s_139[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR_ s_140[] =
{
    { { ERR_REQ}, {  17} },                     
    { {     288}, { 144} }, // Expression       
    { { errTok_}, { 145} }, // errTok_          
    { {     291}, {  49} }, // PreExpression    
    { {     289}, {  50} }, // PostExpression   
    { {      45}, {  51} }, // '-'              
    { {     287}, {  52} }, // PrimaryExpression
    { {     265}, {  53} }, // TRUE             
    { {     266}, {  54} }, // FALSE            
    { {     273}, {  55} }, // CONSTINT         
    { {     274}, {  56} }, // CONSTINT_BIN     
    { {     275}, {  57} }, // CONSTINT_OCT     
    { {     276}, {  58} }, // CONSTINT_HEX     
    { {     277}, {  59} }, // CONSTFP          
    { {     286}, {  60} }, // ID               
    { {      40}, {  61} }, // '('              
    { {     272}, {  24} }, // ID_TEXT          
    { {       0}, {   0} },                     
};

SR_ s_141[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -95} }, 
};

SR_ s_142[] =
{
    { { ERR_REQ}, {  34} },                     
    { {     292}, { 146} }, // Statement        
    { {      59}, {  76} }, // ';'              
    { { errTok_}, { 147} }, // errTok_          
    { {     288}, {  77} }, // Expression       
    { {     293}, {  78} }, // Declaration      
    { {     268}, {  79} }, // IF               
    { {     270}, {  80} }, // WHILE            
    { {     267}, {  81} }, // RETURN           
    { {     123}, {  82} }, // '{'              
    { {     291}, {  49} }, // PreExpression    
    { {     303}, {   4} }, // TypePrimitive    
    { {     289}, {  50} }, // PostExpression   
    { {      45}, {  51} }, // '-'              
    { {     257}, {   5} }, // VOID             
    { {     258}, {   6} }, // BOOL             
    { {     259}, {   7} }, // CHAR             
    { {     260}, {   8} }, // SHORT            
    { {     261}, {   9} }, // INT              
    { {     262}, {  10} }, // LONG             
    { {     263}, {  11} }, // FLOAT            
    { {     264}, {  12} }, // DOUBLE           
    { {     271}, {  13} }, // STRUCT           
    { {     287}, {  52} }, // PrimaryExpression
    { {     265}, {  53} }, // TRUE             
    { {     266}, {  54} }, // FALSE            
    { {     273}, {  55} }, // CONSTINT         
    { {     274}, {  56} }, // CONSTINT_BIN     
    { {     275}, {  57} }, // CONSTINT_OCT     
    { {     276}, {  58} }, // CONSTINT_HEX     
    { {     277}, {  59} }, // CONSTFP          
    { {     286}, {  60} }, // ID               
    { {      40}, {  61} }, // '('              
    { {     272}, {  24} }, // ID_TEXT          
    { {       0}, {   0} },                     
};

SR_ s_143[] =
{
    { { ERR_REQ}, {  34} },                     
    { {     292}, { 148} }, // Statement        
    { {      59}, {  76} }, // ';'              
    { { errTok_}, { 147} }, // errTok_          
    { {     288}, {  77} }, // Expression       
    { {     293}, {  78} }, // Declaration      
    { {     268}, {  79} }, // IF               
    { {     270}, {  80} }, // WHILE            
    { {     267}, {  81} }, // RETURN           
    { {     123}, {  82} }, // '{'              
    { {     291}, {  49} }, // PreExpression    
    { {     303}, {   4} }, // TypePrimitive    
    { {     289}, {  50} }, // PostExpression   
    { {      45}, {  51} }, // '-'              
    { {     257}, {   5} }, // VOID             
    { {     258}, {   6} }, // BOOL             
    { {     259}, {   7} }, // CHAR             
    { {     260}, {   8} }, // SHORT            
    { {     261}, {   9} }, // INT              
    { {     262}, {  10} }, // LONG             
    { {     263}, {  11} }, // FLOAT            
    { {     264}, {  12} }, // DOUBLE           
    { {     271}, {  13} }, // STRUCT           
    { {     287}, {  52} }, // PrimaryExpression
    { {     265}, {  53} }, // TRUE             
    { {     266}, {  54} }, // FALSE            
    { {     273}, {  55} }, // CONSTINT         
    { {     274}, {  56} }, // CONSTINT_BIN     
    { {     275}, {  57} }, // CONSTINT_OCT     
    { {     276}, {  58} }, // CONSTINT_HEX     
    { {     277}, {  59} }, // CONSTFP          
    { {     286}, {  60} }, // ID               
    { {      40}, {  61} }, // '('              
    { {     272}, {  24} }, // ID_TEXT          
    { {       0}, {   0} },                     
};

SR_ s_144[] =
{
    { { REQ_DEF}, {  12} },       
    { {      61}, {  85} }, // '='
    { {      60}, {  86} }, // '<'
    { {      62}, {  87} }, // '>'
    { {     280}, {  88} }, // LE 
    { {     281}, {  89} }, // GE 
    { {     282}, {  90} }, // EQ 
    { {     283}, {  91} }, // NE 
    { {      43}, {  92} }, // '+'
    { {      45}, {  93} }, // '-'
    { {      42}, {  94} }, // '*'
    { {      47}, {  95} }, // '/'
    { {       0}, { -47} },       
};

SR_ s_145[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR_ s_146[] =
{
    { { REQ_DEF}, {   2} },        
    { {     269}, { 149} }, // ELSE
    { {       0}, { -34} },        
};

SR_ s_147[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 106} }, // ';'
    { {         0}, {   0} },       
};

SR_ s_148[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR_ s_149[] =
{
    { { ERR_REQ}, {  34} },                     
    { {     292}, { 150} }, // Statement        
    { {      59}, {  76} }, // ';'              
    { { errTok_}, { 147} }, // errTok_          
    { {     288}, {  77} }, // Expression       
    { {     293}, {  78} }, // Declaration      
    { {     268}, {  79} }, // IF               
    { {     270}, {  80} }, // WHILE            
    { {     267}, {  81} }, // RETURN           
    { {     123}, {  82} }, // '{'              
    { {     291}, {  49} }, // PreExpression    
    { {     303}, {   4} }, // TypePrimitive    
    { {     289}, {  50} }, // PostExpression   
    { {      45}, {  51} }, // '-'              
    { {     257}, {   5} }, // VOID             
    { {     258}, {   6} }, // BOOL             
    { {     259}, {   7} }, // CHAR             
    { {     260}, {   8} }, // SHORT            
    { {     261}, {   9} }, // INT              
    { {     262}, {  10} }, // LONG             
    { {     263}, {  11} }, // FLOAT            
    { {     264}, {  12} }, // DOUBLE           
    { {     271}, {  13} }, // STRUCT           
    { {     287}, {  52} }, // PrimaryExpression
    { {     265}, {  53} }, // TRUE             
    { {     266}, {  54} }, // FALSE            
    { {     273}, {  55} }, // CONSTINT         
    { {     274}, {  56} }, // CONSTINT_BIN     
    { {     275}, {  57} }, // CONSTINT_OCT     
    { {     276}, {  58} }, // CONSTINT_HEX     
    { {     277}, {  59} }, // CONSTFP          
    { {     286}, {  60} }, // ID               
    { {      40}, {  61} }, // '('              
    { {     272}, {  24} }, // ID_TEXT          
    { {       0}, {   0} },                     
};

SR_ s_150[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};


// State array:
SR_ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,
};

} // anonymous namespace ends




// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved_::UNDETERMINED_),
    // $insert baseclasscode
    d_requiredTokens_(0)
{
}

// base/clearin
void ParserBase::clearin_()
{
    d_nErrors_ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved_::UNDETERMINED_;
    d_next = TokenPair{ Reserved_::UNDETERMINED_, STYPE_{} };
    d_recovery = false;
    d_acceptedTokens_ = d_requiredTokens_;
    d_val_ = STYPE_{};

    push_(0);
}

// base/debugfunctions

void ParserBase::setDebug(bool mode)
{
    d_actionCases_ = false;
    d_debug_ = mode;
}

void ParserBase::setDebug(DebugMode_ mode)
{
    d_actionCases_ = mode & ACTIONCASES;
    d_debug_ =       mode & ON;
}

// base/lex
void ParserBase::lex_(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved_::EOF_;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup_() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR_ const *sr = s_state[d_state];
    SR_ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN_;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop_(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void ParserBase::popToken_()
{
    d_token = d_next.first;
    d_val_ = std::move(d_next.second);

    d_next.first = Reserved_::UNDETERMINED_;
}

// base/push
void ParserBase::push_(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize_() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION_;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val_) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken_(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val_) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken_()
{
    if (d_token != Reserved_::UNDETERMINED_)
        pushToken_(d_token);
}

// base/reduce
void ParserBase::reduce_(int rule)
{
    PI_ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop_(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift_(int action)
{
    push_(action);
    popToken_();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens_ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery_()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken_(Reserved_::errTok_);      // specify errTok_ as next token
    push_(lookup_());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top_() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery_()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens_ >= d_requiredTokens_)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors_;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top_()][0].d_type & ERR_ITEM))
    {
        pop_();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle_ for details.

    startRecovery_();
}

// derived/executeaction
void Parser::executeAction_(int production)
try
{
    if (token_() != Reserved_::UNDETERMINED_)
        pushToken_(token_());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 1:
        { _Root = std::move(vs_(0)); }
        break;

        case 2:
        { d_val_ = std::make_unique<ast::ID>(_Scanner->matched(), _Scanner->GetLocation()); }
        break;

        case 3:
        { d_val_ = std::make_unique<ast::Constant>(true, _Scanner->GetLocation()); }
        break;

        case 4:
        { d_val_ = std::make_unique<ast::Constant>(false, _Scanner->GetLocation()); }
        break;

        case 5:
        { d_val_ = std::make_unique<ast::Constant>(std::stoll(_Scanner->matched()), _Scanner->GetLocation()); }
        break;

        case 6:
        { d_val_ = std::make_unique<ast::Constant>(std::stoll(_Scanner->matched(), nullptr, 2), _Scanner->GetLocation()); }
        break;

        case 7:
        { d_val_ = std::make_unique<ast::Constant>(std::stoll(_Scanner->matched(), nullptr, 8), _Scanner->GetLocation()); }
        break;

        case 8:
        { d_val_ = std::make_unique<ast::Constant>(std::stoll(_Scanner->matched(), nullptr, 16), _Scanner->GetLocation()); }
        break;

        case 9:
        { d_val_ = std::make_unique<ast::Constant>(std::stod(_Scanner->matched()), _Scanner->GetLocation()); }
        break;

        case 10:
        { d_val_ = std::make_unique<ast::Variable>(vs_(0)); }
        break;

        case 11:
        { d_val_ = std::move(vs_(-1)); }
        break;

        case 12:
        { d_val_ = nullptr; }
        break;

        case 13:
        { d_val_ = std::move(vs_(0)); }
        break;

        case 14:
        { d_val_ = std::move(vs_(-1)); ast::cast<ast::CallExpr>(d_val_)->SetFunc(vs_(-3)); }
        break;

        case 15:
        { d_val_ = nullptr; }
        break;

        case 16:
        { d_val_ = std::move(vs_(0)); }
        break;

        case 17:
        { d_val_ = std::make_unique<ast::UnOpExpr>(vs_(0), ast::UnOpExpr::NEG); }
        break;

        case 18:
        { d_val_ = std::move(vs_(0)); }
        break;

        case 19:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::ASSIGN); }
        break;

        case 20:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::LESS); }
        break;

        case 21:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::GREATER); }
        break;

        case 22:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::LESS_EQUAL); }
        break;

        case 23:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::GREATER_EQUAL); }
        break;

        case 24:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::EQUAL); }
        break;

        case 25:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::NOT_EQUAL); }
        break;

        case 26:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::ADD); }
        break;

        case 27:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::SUB); }
        break;

        case 28:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::MUL); }
        break;

        case 29:
        { d_val_ = std::make_unique<ast::BiOpExpr>(vs_(-2), vs_(0), ast::BiOpExpr::DIV); }
        break;

        case 30:
        { d_val_ = std::make_unique<ast::ExprStmt>(); }
        break;

        case 31:
        { d_val_ = nullptr; }
        break;

        case 32:
        { d_val_ = std::make_unique<ast::ExprStmt>(vs_(-1)); }
        break;

        case 33:
        { d_val_ = std::move(vs_(0)); }
        break;

        case 34:
        { d_val_ = std::make_unique<ast::IfStmt>(vs_(-2), vs_(0)); }
        break;

        case 35:
        { d_val_ = std::make_unique<ast::IfStmt>(vs_(-4), vs_(-2), vs_(0)); }
        break;

        case 36:
        { d_val_ = std::make_unique<ast::WhileStmt>(vs_(-2), vs_(0)); }
        break;

        case 37:
        { d_val_ = std::make_unique<ast::ReturnStmt>(); }
        break;

        case 38:
        { d_val_ = std::make_unique<ast::ReturnStmt>(vs_(-1)); }
        break;

        case 39:
        { d_val_ = std::move(vs_(-1)); }
        break;

        case 40:
        { d_val_ = nullptr; }
        break;

        case 41:
        { d_val_ = std::make_unique<ast::StatementList>(); }
        break;

        case 42:
        { d_val_ = std::move(vs_(-1)); ast::cast<ast::StatementList>(d_val_)->AddStmt(vs_(0)); }
        break;

        case 43:
        { d_val_ = std::move(vs_(-1)); }
        break;

        case 44:
        { d_val_ = std::make_unique<ast::CallExpr>(); }
        break;

        case 45:
        { d_val_ = std::move(vs_(0)); }
        break;

        case 46:
        { d_val_ = std::make_unique<ast::CallExpr>(vs_(0)); }
        break;

        case 47:
        { d_val_ = std::move(vs_(-2)); ast::cast<ast::CallExpr>(d_val_)->AddArg(vs_(0)); }
        break;

        case 48:
        { d_val_ = std::move(vs_(-2)); }
        break;

        case 49:
        { d_val_ = std::make_unique<ast::VarDecl>(vs_(0)); }
        break;

        case 50:
        { d_val_ = std::make_unique<ast::ArrayDecl>(vs_(-2)); }
        break;

        case 51:
        { d_val_ = std::make_unique<ast::ArrayDecl>(vs_(-3), vs_(-1)); }
        break;

        case 52:
        { d_val_ = nullptr; }
        break;

        case 53:
        { d_val_ = std::make_unique<ast::PointerDecl>(vs_(0)); }
        break;

        case 54:
        { d_val_ = std::make_unique<ast::ReferenceDecl>(vs_(0)); }
        break;

        case 55:
        { d_val_ = std::move(vs_(-1)); }
        break;

        case 56:
        { d_val_ = nullptr; }
        break;

        case 57:
        { d_val_ = std::move(vs_(-1)); ast::cast<ast::FuncDecl>(d_val_)->SetName(vs_(-3)); }
        break;

        case 58:
        { d_val_ = std::make_unique<ast::ArrayDecl>(vs_(-2)); }
        break;

        case 59:
        { d_val_ = std::make_unique<ast::ArrayDecl>(vs_(-3), vs_(-1)); }
        break;

        case 60:
        { d_val_ = nullptr; }
        break;

        case 61:
        { d_val_ = std::make_unique<ast::PointerDecl>(vs_(0)); }
        break;

        case 62:
        { d_val_ = std::make_unique<ast::ReferenceDecl>(vs_(0)); }
        break;

        case 63:
        { d_val_ = std::move(vs_(-1)); }
        break;

        case 64:
        { d_val_ = nullptr; }
        break;

        case 65:
        { d_val_ = std::make_unique<ast::ID>("", _Scanner->GetLocation()); }
        break;

        case 66:
        { d_val_ = std::make_unique<ast::VarDecl>(vs_(0)); }
        break;

        case 67:
        { d_val_ = std::move(vs_(-1)); ast::cast<ast::FuncDecl>(d_val_)->SetName(vs_(-3)); }
        break;

        case 68:
        { d_val_ = std::make_unique<ast::ArrayDecl>(vs_(-2)); }
        break;

        case 69:
        { d_val_ = std::make_unique<ast::ArrayDecl>(vs_(-3), vs_(-1)); }
        break;

        case 70:
        { d_val_ = nullptr; }
        break;

        case 71:
        { d_val_ = std::make_unique<ast::PointerDecl>(vs_(0)); }
        break;

        case 72:
        { d_val_ = std::make_unique<ast::ReferenceDecl>(vs_(0)); }
        break;

        case 73:
        { d_val_ = std::move(vs_(-1)); }
        break;

        case 74:
        { d_val_ = nullptr; }
        break;

        case 75:
        { d_val_ = std::move(vs_(0)); }
        break;

        case 76:
        { d_val_ = std::move(vs_(0)); }
        break;

        case 77:
        { d_val_ = std::make_unique<ast::InitDecl>(vs_(0)); }
        break;

        case 78:
        { d_val_ = std::make_unique<ast::InitDecl>(vs_(-2), vs_(0)); }
        break;

        case 79:
        { d_val_ = std::make_unique<ast::BasicType>(ast::BasicType::VOID); }
        break;

        case 80:
        { d_val_ = std::make_unique<ast::BasicType>(ast::BasicType::BOOL); }
        break;

        case 81:
        { d_val_ = std::make_unique<ast::BasicType>(ast::BasicType::CHAR); }
        break;

        case 82:
        { d_val_ = std::make_unique<ast::BasicType>(ast::BasicType::SHORT); }
        break;

        case 83:
        { d_val_ = std::make_unique<ast::BasicType>(ast::BasicType::INT); }
        break;

        case 84:
        { d_val_ = std::make_unique<ast::BasicType>(ast::BasicType::LONG); }
        break;

        case 85:
        { d_val_ = std::make_unique<ast::BasicType>(ast::BasicType::FLOAT); }
        break;

        case 86:
        { d_val_ = std::make_unique<ast::BasicType>(ast::BasicType::DOUBLE); }
        break;

        case 87:
        { d_val_ = std::make_unique<ast::CustomType>(vs_(0)); }
        break;

        case 88:
        { d_val_ = std::make_unique<ast::VarDeclaration>(vs_(0)); }
        break;

        case 89:
        { d_val_ = std::move(vs_(-2)); ast::cast<ast::VarDeclaration>(d_val_)->AddVar(vs_(0)); }
        break;

        case 90:
        { d_val_ = std::move(vs_(-2)); }
        break;

        case 91:
        { d_val_ = std::make_unique<ast::FuncDecl>(); }
        break;

        case 92:
        { d_val_ = std::make_unique<ast::FuncDecl>(); }
        break;

        case 93:
        { d_val_ = std::move(vs_(0)); }
        break;

        case 94:
        { d_val_ = std::make_unique<ast::FuncDecl>(vs_(-1), vs_(0)); }
        break;

        case 95:
        { d_val_ = std::move(vs_(-3)); ast::cast<ast::FuncDecl>(d_val_)->AddParam(vs_(-1), vs_(0)); }
        break;

        case 96:
        { d_val_ = std::move(vs_(-2)); }
        break;

        case 97:
        { d_val_ = std::move(vs_(-1)); ast::cast<ast::VarDeclaration>(d_val_)->SetType(vs_(-2)); }
        break;

        case 98:
        { d_val_ = std::make_unique<ast::FuncDeclaration>(vs_(-4), vs_(-3), vs_(-1)); }
        break;

        case 99:
        { d_val_ = nullptr; }
        break;

        case 100:
        { d_val_ = std::make_unique<ast::DeclarationList>(vs_(0)); }
        break;

        case 101:
        { d_val_ = std::move(vs_(-1)); ast::cast<ast::DeclarationList>(d_val_)->AddDecl(vs_(0)); }
        break;

        case 102:
        { d_val_ = std::move(vs_(-1)); }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle_()
try
{
    if (s_state[state_()]->d_type & REQ_TOKEN)
        nextToken_();              // obtain next token


    int action = lookup_();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift_(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery_())
            redoToken_();
        else
            executeAction_(-action);
                                            // next token is the rule's LHS
        reduce_(-action); 
        return;
    }

    if (recovery_())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery_)
{
    if (not recovery_())
        errorRecovery_();
    else
    {
        if (token_() == Reserved_::EOF_)
            ABORT();
        popToken_();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken_()
{ 
    // If d_token is Reserved_::UNDETERMINED_ then if savedToken_() is
    // Reserved_::UNDETERMINED_ another token is obtained from lex(). Then
    // savedToken_() is assigned to d_token.

                                    // no need for a token: got one already
    if (token_() != Reserved_::UNDETERMINED_) 
    {
        return;                             
    }

    if (savedToken_() != Reserved_::UNDETERMINED_)
    {
        popToken_();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens_;       // accept another token (see
                                    // errorRecover())
        lex_(lex());
        print_();
    }
    print();
}

// derived/print
void Parser::print_()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin_.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin_();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle_();
    }
}
catch (Return_ retValue)
{
    return retValue or d_nErrors_;
}


// derived/tail


// This function will be appended to parse.cc

std::vector<int> Parser::ValidTokens()
{
    auto sr = s_state[state_()];
    auto last = sr + sr->d_lastIdx;
    std::set<int> set;
    std::vector<int> res;
    for (; ++sr != last;)
        if (sr->d_token > 0 && sr->d_token != 256 && 
            sr->d_token < 257 + static_cast<int>(TOKEN_COUNT) &&
            set.find(sr->d_token) == set.end())
        {
            set.insert(sr->d_token);
            res.push_back(sr->d_token);
        }
    if (sr == last && sr->d_action < 0)
        if (sr->d_token > 0 && sr->d_token != 256 && 
            sr->d_token < 257 + static_cast<int>(TOKEN_COUNT) &&
            set.find(sr->d_token) == set.end())
        {
            set.insert(sr->d_token);
            res.push_back(sr->d_token);
        }
    return res;
}
